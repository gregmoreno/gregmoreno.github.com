<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Greg Moreno]]></title>
  <link href="http:///atom.xml" rel="self"/>
  <link href="http:///"/>
  <updated>2019-03-12T22:45:41-07:00</updated>
  <id>http:///</id>
  <author>
    <name><![CDATA[Greg Moreno]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Schedule delays should not surprise you]]></title>
    <link href="http:///schedule-delays-should-not-surprise-you/"/>
    <updated>2019-03-12T22:29:30-07:00</updated>
    <id>http:///schedule-delays-should-not-surprise-you</id>
    <content type="html"><![CDATA[<p>When do you plan to talk about that crucial albeit uncomfortable topic? You know, that you are not going to hit your release date.</p>

<p>Often, awareness about delays surfaces only when we are a couple of days before release date and our boss asked the dreaded question “Are we going to make it?”. In reality, delays don’t happen near the end - it happens numerous times in the middle.</p>

<p>You got pulled on an unscheduled meeting. Your project is now delayed by an hour.
You left the office early to buy that toy for your daughter’s 7th birthday. Add 4 more hours.
You worked on that nasty bug from the previous release. Make that 3 days and 5 hours.
You got sick. Now, you are delayed by a week.
You procrastinated. etc. etc.</p>

<p>These seemingly little things happen all the time yet we don’t consider than as big contributors to our schedule delays. Often, we attribute things outside our control like a developer quitting in the middle of the project or big requirement change midway as causes of delays.  Yet the true contributors are just hiding in plain sight and these little slips accumulated over time will become a major cause of delay.</p>

<p>One of the first things you can do is to have enough granularity with your deliverables that progress is obvious over a period of just couple of days as much as possible. When your commitments span weeks and  there is no clear progress over a long period, you won’t have any idea if you are near or far to your target.  And if your job is to manage delivery, that feeling of not knowing sucks. But if you make commitments over short intervals and you failed to deliver, you know if you need to make up for a day or two, which is more manageable.  If you let a week go by without knowing what is happening, that is too long already and you could be facing a delay that is a challenge to compensate for.</p>

<p>The second step is to make sure your team understands who depends on those deliverables. If Alice is working on that API that Bob needs,  and Bob is working on the shopping cart that Charlies needs to test, and Charlie needs to give the test results to Alice, every one should understand the interdependency among the individuals. This dynamic is repeated hundred times prior to hitting a milestone. When you think about it, hitting your deadline is all about making and keeping hundreds of small vital promises.</p>

<p>If you keep tab of those hundred promises, delays shouldn’t surprise you. When your team failed to deliver on this week’s promises and then four weeks later you learned your project is now late, then that is a problem. Most likely, people are not talking to teach other, not aware of the impact of a broken promise, or worse, have no sense of mutual accountability.</p>

<p>Every delay will cost your team some credibility points, and each one can costs more than the previous. On the bright side, there are positive things to be gained out of it. Delays are uncomfortable topic but these often trigger new insights, alternative views, and previously unimagined possibilities.  As new information comes in, you are now more closer to reality and your team can course correct towards the best results instead of blindly sticking to plans and schedules that were set when you still have a long list of unknowns.</p>

<p>Flexibility is software’s greatest asset and quickly adapting to changing environments is characteristic of excellence in software development.  You can add time, subtract features, add resources, or do some combination of the three. You have heard this a million times - the famous triangle of features, resources, and time.  At the end of day you only have those 3 things to work with.</p>

<p>There will be pressure to give a new end date but don’t give in. While it is uncomfortable knowing you already have a bad date, wait until the cause of the delay and extent are totally understood.  This is not the time to estimate how much you’ve slipped and tacking it to your current schedule which is already proven to be wrong. This is the time to think through all the new information and possible remedies.</p>

<p>Delays are commonly viewed negatively and much of it stems from our desire for things to be predictable. In reality, software development is an experiment of putting together a diverse group of people to perform a creative endeavour.  Software development, even after decades of experimenting with different practices, is still not an exact science — it’s more of an art form sprinkled with technical fairy dusts</p>

<p>Every software project, no matter how successful they were, started with a large number of important things that were unknown. It is undesirable to have many unknowns but not unusual.  Given each software development project is unique with its own personality and combine that with new technologies and new approaches, you end up with high degree of uncertainty — the odds are against you.</p>

<p>However, attempting to eliminate all the unknowns at the start is not only unrealistic but also a waste of your precious time. Instead, one of your primary job is to make every one embrace uncertainty and guide your organization so it thrives in an uncertain environment.  Your team’s mindset is not to follow a plan to perfection but to make the right decisions every day as the unknowns become knowns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5-bullet Sunday morning"]]></title>
    <link href="http:///5-bullet-sunday-morning/"/>
    <updated>2017-11-04T17:50:57-07:00</updated>
    <id>http:///5-bullet-sunday-morning</id>
    <content type="html"><![CDATA[<p><em>I’m currently reading <a href="https://www.amazon.ca/Principles-Life-Work-Ray-Dalio/dp/1501124021/ref=pd_bxgy_14_img_2?_encoding=UTF8&amp;psc=1&amp;refRID=BMW026RN9BH7JBJKAFXP">Principles by Ray Dalio</a></em></p>

<p>When your name is Ray Dalio, you dont need a thought-provoking title nor a fancy cover to have a bestseller. It is a thick book and with a hardbound black cover, it can pass as the Bible. Just like the Bible, this is not a book you read in one sitting nor something to pass the time. I had to pause, think about what he said, question it, and see if I can apply it to my life.</p>

<p>Here is Ray Dalio’s popular <a href="https://www.youtube.com/watch?v=HXbsVbFAczg">TED talk</a>.</p>

<p><em>Bitcoin is so hot I need to mention it</em></p>

<p>A friend messaged me complaining how complicated and tedious it is to trade Bitcoin and other cryptocurrencies. Worse, he is just halfway to all the things he need to do. We haven’t fully discussed what a wallet is for, why a piece of paper can be so important in the Internet age, and why he needs a water-tight fire-proof vault :) He made the leap even though he still doesn’t fully understand what all these currencies are and I can only imagine how these steps can feel like just a waste of time.</p>

<p>He is not alone and this is good thing.</p>

<p>Yes, I am channeling my inner Stoicism here so here me out. Massive financial gains happen when you got in an opportunity before the general public does. The Bitcoin ecosystem right now is not much different from the early days of the Internet — with all the possibilities, confusion, as well as danger of <a href="https://medium.com/@dennyk/why-and-how-the-cryptobubble-will-burst-de9bc7fc5332">another bubble</a>.</p>

<p>If you feel the pain, look at it as your ticket to an exciting game. Let us enjoy the game and I wish you good luck.</p>

<p><em>On watching Cirque du Soleil</em></p>

<p>I first heard of Cirque du Soleil about 4 years ago. Whenever they are in Vancouver, they would have a big tent setup in the parking lot near a train station. Around this time, I would see that tent on way to and from my work. It is like one mysterious event. You don’t see much from the outside but people are lining up and you hear conversations in the train on how breathtaking the show is.</p>

<p>When I heard they are coming again, we made sure we will not let it pass this time, damn the cost. I am glad we did not. My kids love it. I love it. Seeing people fly and do stunts in a 3D theatre is fun though we know it is all computer magic and stunt doubles. But watching people somersault in the air with only a rope on one arm is way different fun. You can actually feel the danger with it.</p>

<p>I am grateful I get to watch this with my family.</p>

<p><em>This thing in JavaScript</em></p>

<p>Finished some modules from Wes Bos JavaScript course, so why not apply it right away. So I did and I thought this was no a brainer.</p>

<pre><code>$('#filters').on('change', () =&gt; {
  console.log($(this).val());
});
</code></pre>

<p>Except that it is not and I paid some scarce hair for it. The right solution is to use regular function.</p>

<pre><code>$('#filters').on('change', function () {
  console.log($(this).val());
});
</code></pre>

<p>Ah the binding. When using arrow function, <code>this</code> is not bound to the <code>on</code> scope. Instead, it just inherited whatever the parent scope is. Lesson learned.</p>

<p>Now I get it. So I thought.</p>

<pre><code>$('#filters').on('change', function () {
  console.log($(this).val());
  setTimeout(function () {
    console.log($(this).val());
  });
});
</code></pre>

<p>Damnit, same error again. Because inside the function passed to setTimeout, <code>this</code> is bound to <code>setTimeout</code>. Hence, the same error. To fix it, just use arrow function.</p>

<pre><code>$('#filters').on('change', function () {
  console.log($(this).val());
  setTimeout(() =&gt; {
    console.log($(this).val());
  });
});
</code></pre>

<p>Confusing, eh? Just remember to go back to the binding rules for the arrow function and now it makes sense because we want to have this refer to the parent scope.</p>

<p><em>Quote for you</em></p>

<p>&ldquo;A side effect of doing challenging work is that you’re pulled by excitement and pushed by confusion at the same time.&rdquo;
- <a href="https://jamesclear.com/successful-people-start-before-they-feel-ready?__s=rg5u4ofe9tzwuyfixegg">James Clear</a></p>

<p>This post also appeared at <a href="https://medium.com/@gregmoreno/5-bullet-sunday-morning-1524f4db811">Medium</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5-bullet Sunday morning]]></title>
    <link href="http:///5-bullet-sunday-morning/"/>
    <updated>2017-10-29T21:43:07-07:00</updated>
    <id>http:///5-bullet-sunday-morning</id>
    <content type="html"><![CDATA[<p>On Javascript, 1–1s, scholarships, bitcoin, and evil things.</p>

<p><em>As a developer:</em></p>

<p><a href="https://medium.com/@peterxjang/modern-javascript-explained-for-dinosaurs-f695e9747b70">Modern JavaScript Explained For Dinosaurs</a></p>

<p>Even though I’m already familiar with the tools mentioned in the article, this provided me a better understanding of the front-end ecosystem. It also helped that the headline resonated with me :) The article started with doing it old school — just like many of us dinosaurs did decades ago and moved on to modern techniques. It’s like resetting your brain and learning things again but only this time you come out with a better understanding.</p>

<p>On related note, I’m currently taking the <a href="https://es6.io/">ES6 course by Wes Bos</a>. Just finished the Promises module and I say it’s totally worth it.</p>

<p><em>As a manager:</em></p>

<p>I’m thinking about 1–1s, why we do it and how to make it worthwhile for both parties. 1–1s that turn into status updates that can easily (and more efficiently) be done via email is a waste of everyone ’s time. But if you view 1–1s as an opportunity to create a connection between you and your manager, it is a very effective tool to build great working relationships that will go beyond your current workplace.</p>

<p>Don’t think of it as a meeting but rather a coffee with someone you are eager to know better.</p>

<p><em>As a parent:</em></p>

<p>My wife and I, together with our Grade 11 son, attended a college scholarship seminar sponsored by my son’s school. The school’s theatre is packed but according to my son, it is just a fraction of the student population that would benefit from it. I wonder why there aren’t that much interest on such an opportunity. My hypothesis is many students (and even parents) think applying for college scholarships is done when you are close to graduation time.</p>

<p>My takeaway from the seminar is that going after the smaller grants (e.g. $500 — $5000) will give you a better chance of hitting your scholarship goals. Why? Because there are so many of them (at least in Canada) and the chance of getting accepted to at least 10 is not unrealistic. Add those amounts and now your college is free. On the other hand, if you aim for the lottery, not only you are competing against the best and the brightest students who found a cure to cancer or ended hunger in Africa, there is just a handful of slots available.</p>

<p>If you’re a teacher or member of the parent council, and if you happen to be in BC Canada, I recommend you book <a href="http://www.keytoscholarships.com/">Brittany Palmer</a>.</p>

<p><em>On Bitcoin and cryptocurrencies:</em></p>

<p>There is a lot of hype going around and we shouldn’t be shocked if 99% of the cryptocurrencies out there turn out to be scams. Many people don’t know, including those who now call themselves “investors”, that these cryptocurrencies have 2 sides — the money and the technology. What you will often hear is the money side. After all, a headline that says some “kid became a millionaire after investing $100” will always grab our attention.</p>

<p>Of course, as an “investor”, I am happy with the success of the cryptocurrencies but even if the prices go down to zero, the technology (hint: it is not just blockchain) will stay and evolve in the coming years. And that is where the real benefits lie.</p>

<p>Cryptocurrencies are here to stay. But don’t be stupid.</p>

<p><em>I’m pondering:</em></p>

<p>What if evil is part of life? That the person doing bad things is just doing his job? Like a normal job, some are bad at it, some are doing it really well, and some are simply looking to change job?
On that note, <a href="http://www.imdb.com/title/tt5290382/?ref_=fn_al_tt_1">Mindhunter</a> looks to be another interesting series from Netflix. But that has to wait because it is <a href="http://www.imdb.com/title/tt4574334/?ref_=nv_sr_1">Stranger Things Season 2</a> baby.</p>

<p>This post was also published at <a href="https://medium.com/@gregmoreno/5-bullet-sunday-morning-786a8c6c35ae">Medium</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Am I too old to be a senior developer?]]></title>
    <link href="http:///am-i-too-old-to-be-a-senior-developer/"/>
    <updated>2017-02-20T19:35:04-08:00</updated>
    <id>http:///am-i-too-old-to-be-a-senior-developer</id>
    <content type="html"><![CDATA[<p>Or, aren&rsquo;t you too young to be a Senior developer?</p>

<p>I never had the title of Senior Developer until about 3 years ago. By that time, I already have 15 years of experience in creating, deploying and fixing software. This is not counting the years I spent freelancing for various tech companies while I was in college. I have worked in startups and big companies, led teams, launched several products on my own and failed, and numerous times I had to learn stuff not related to coding just to get that freaking software out the door. Suddenly, I feel so old and it feels so jurassic now to remember my Visual Basic program running on Windows 95 - ah the good old days!</p>

<p>I imagine these are more than enough to earn a senior title. On the other hand, I’ve worked with developers with a senior title who produced amateurish work. It made me wonder when should companies give the “senior” title to someone. More importantly, when can a developer, call oneself a senior in this field?</p>

<p>In the early stages of a project, the team usually has a number of technical options. A senior developer can articulate the pros and cons of a technical decision - the why and when, not just the how and what. This could be  as simple as avoiding early optimizations, highlighting roadblocks the team will face, or avoiding unnecessary work.</p>

<p>An effective signal to know someone is truly a senior developer (or in that mindset regardless of title) is when the developer looks at context when applying a theory. What problem are we solving? What is important and what is not? When to start and when to stop. How often have you seen over-engineered systems that are flexible in ways that don’t matter and inflexible in ones that do? This is simply because developers want to try the latest cool thing they’ve read.</p>

<p>There is also, looking at the big picture. Not every moment in software development is spent working on change-the-world tasks. It’s quite the contrary. Majority of your time is spent on boring tasks that must be completed to the same quality as any other potentially more interesting tasks. Have you met a developer who planned on resigning if he get to work on a legacy project, regardless if that project generates millions of dollars of revenue? I did. It made me think now, if he was more interested in showing off in his resume rather than adding value to the company.</p>

<p>If my thoughts above would  be considered, does this mean a developer with 3 years of coding experience and brings tremendous value to the team, can now be called a senior developer?  How about someone with 10 years experience but in reality is just experienced the same year 10 times?</p>

<p>Realization. It’s never about time - it’s the maturity.</p>

<p>On the other hand,  how realistically can you gain maturity in a short amount of time? Can you compress 10 years worth of experience into 1?</p>

<p>Success in software development goes beyond technical skills. If you want to learn how to manage a crisis, you have to experience a crisis. If you want to have a high performing team, you have to learn to work together, which takes time. Hey, even when superstar athletes play together they rarely get success in their first two years.</p>

<p>Can we now agree that years of experience is misleading? Worthwhile experiences simply do not happen every day. You can try compressing it similar to what schools do, or read books that’s ideally based on the author’s years of experience. Still, while these are helpful, they are not good enough to deal with messy problems. In actual work, there are lots of compromises and very few assumptions. And you have to rely on your previous success and failures when dealing with new problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#til Elixir's anonymous function]]></title>
    <link href="http:///til-elixir-anonymous-function/"/>
    <updated>2017-02-16T20:46:04-08:00</updated>
    <id>http:///til-elixir-anonymous-function</id>
    <content type="html"><![CDATA[<p>fn is a keyword that creates an anonymous function.</p>

<pre><code>sum = fn(a,b) -&gt;
  a+b
end

IO.puts sum.(1,2)
</code></pre>

<p>Invoke using . (dot) similar to Ruby&rsquo;s #call.
Note the dot is not used for named function calls.</p>

<pre><code>fb = fn
  {0, 0, c} -&gt; "FizzBuzz"
  {0, b, c} -&gt; "Fizz"
  {a, 0, c} -&gt; "Buzz"
  {a, b, c} -&gt; c
end
</code></pre>

<p>A single function with multiple implementations
depending on the arguments passed. Elixir does not have assignments - yes you heard it right.
Instead, it uses pattern matching then it binds the variable to the value.
Note each implementation should have the same number of arguments.</p>

<pre><code>IO.puts fb.({0,0,3})
# FizzBuzz
IO.puts fb.({0,2,3})
# Fizz
IO.puts fb.({1,0,3})
# Buzz
IO.puts fb.({1,2,3})
# 3
</code></pre>

<p>Since it is just a function, why not define it inside another function.</p>

<pre><code>fizzbuzz = fn(n) -&gt;
  fb = fn
    {0, 0, c} -&gt; "FizzBuzz"
    {0, b, c} -&gt; "Fizz"
    {a, 0, c} -&gt; "Buzz"
    {a, b, c} -&gt; c
  end

  fb.({rem(n,3), rem(n,5), n})
end

IO.puts fizzbuzz.(10)
IO.puts fizzbuzz.(11)
IO.puts fizzbuzz.(12)
IO.puts fizzbuzz.(13)
IO.puts fizzbuzz.(14)
IO.puts fizzbuzz.(15)
IO.puts fizzbuzz.(16)
</code></pre>

<p>We now have a baseline <a href="http://wiki.c2.com/?FizzBuzzTest">FizzBuzz</a> solution with no conditional logic.
Note <code>rem(a,b)</code> is an operator that returns the remainder after dividing a by b. The final solution uses
the <a href="https://hexdocs.pm/elixir/Enum.html">Enum module</a>.</p>

<pre><code>Enum.each(1..100, fn(n) -&gt; IO.puts fizzbuzz.(n) end)
</code></pre>

<p>I&rsquo;ve read the <code>|&gt;</code> <a href="https://elixirschool.com/lessons/basics/pipe-operator/">pipe operator</a> before, so why not use it. The pipe operator simply takes the result
of one expression and passes it as the 1st parameter to the next expression.</p>

<pre><code>(1..100) |&gt; Enum.each(fn(n) -&gt; IO.puts fizzbuzz.(n) end)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joy Ride in Ruby's spaceship]]></title>
    <link href="http:///joy-ride-in-rubys-spaceship/"/>
    <updated>2016-02-16T20:52:04-08:00</updated>
    <id>http:///joy-ride-in-rubys-spaceship</id>
    <content type="html"><![CDATA[<p>Ruby&rsquo;s <code>&lt;=&gt;</code> operator is commonly referred to as the spaceship in the community. You may not have
played with it directly but I bet you have relied on it a lot of times. Because, every time you use
sort an array, you are tapping in to the spaceship operator.</p>

<p>Now, why would you care? Because sometimes we need to sort things which does not have a natural ordering
computers are accustomed to. Take for example sorting clothes that use S, M, and L to refer to their sizes.
And to add more fun, how about putting XS, XL, and XXL into the mix.</p>

<p>Let&rsquo;s start with a bare class and see what happens.</p>

<pre><code>require 'minitest/autorun'

class Size
  attr_reader :size

  def initialize(size)
    @size = size.to_s.upcase
  end

  def to_s
    @size
  end
end

describe Size do
  let(:sizes) { %w[L S M].map { |s| Size.new(s) } }
  it { sizes.sort.map(&amp;:to_s).must_equal %w[S M L] }

  let(:a) { Size.new('S') }
  let(:b) { Size.new('M') }

  it { (a &gt; b).must_equal false }
  it { (a &lt; b).must_equal true }
end

$&gt; ruby size.rb                                                                                                     [2.1.2]
Run options: --seed 37770

# Running:

EEE

Finished in 0.001207s, 2486.1356 runs/s, 0.0000 assertions/s.

  1) Error:
Size#test_0001_anonymous:
ArgumentError: comparison of Size with Size failed
    size.rb:24:in `sort'
    size.rb:24:in `block (2 levels) in &lt;main&gt;'


  2) Error:
Size#test_0002_anonymous:
NoMethodError: undefined method `&gt;' for #&lt;Size:0x007f8a7bae6c50 @size="S"&gt;
    size.rb:29:in `block (2 levels) in &lt;main&gt;'


  3) Error:
Size#test_0003_anonymous:
NoMethodError: undefined method `&lt;' for #&lt;Size:0x007f8a7bae6390 @size="S"&gt;
    size.rb:30:in `block (2 levels) in &lt;main&gt;'

3 runs, 0 assertions, 0 failures, 3 errors, 0 skips
</code></pre>

<p>Our test failed and that&rsquo;s good news, isn&rsquo;t it? The first failure is because the default
implementation of <code>&lt;=&gt;</code> doesn&rsquo;t do all the comparison required to make <code>sort</code> work. To make this
work, we need to implement a <code>&lt;=&gt;</code> that returns the following:</p>

<ul>
<li>nil if the comparison does not makes sense</li>
<li>-1 if left side is less than right side</li>
<li>1 if left side is greater than right side</li>
<li>0 if left and right are the same</li>
</ul>


<p>Let&rsquo;s update our code to use the spaceship.</p>

<pre><code>class Size
  attr_reader :size

  SIZES = %w[S M L].freeze

  def initialize(size)
    @size = size.to_s.upcase
  end

  def to_s
    @size
  end

  def &lt;=&gt;(other)
    position &lt;=&gt; other.position
  end

  protected

  def position
    SIZES.index(size)
  end
end
</code></pre>

<p>Some things to ponder in our implementation.</p>

<ul>
<li>In Ruby, operator calls are just method calls where the left side is the receiver and right side is
the argument. In other words, this is  <code>a &lt;=&gt; b</code> is the same as <code>a.&lt;=&gt;(b)</code></li>
<li>It is common practice to call the argument as <code>other</code> as you know the other object :)</li>
<li>We leverage an existing implementation of <code>&lt;=&gt;</code>. The method <code>#index</code> returns the position of an element
in the array, which is a <code>Fixnum</code>. The <code>Fixnum</code> class already knows how to compare numbers.</li>
<li>We use <code>protected</code> to hide an implementation detail but at the same time allow us to use it within instance
methods of objects of the same class.</li>
</ul>


<p>Now, how about the other test failures? Do we need to implement the <code>&lt;</code> and <code>&gt;</code> operators as well?
Fortunately, Ruby got our back. We just need to include the module <a href="http://ruby-doc.org/core-2.3.0/Comparable.html"><code>Comparable</code></a>
and we&rsquo;re good. But wait, there&rsquo;s more! By including the <code>Comparable</code> module, we also get
<code>&lt;=</code>, <code>&gt;=</code>, and <code>==</code> for free.</p>

<p>Here&rsquo;s the full implementation with additional test scenarios, including a reverse sort.</p>

<pre><code>require 'minitest/autorun'

class Size
  include Comparable

  SIZES = %w[S M L].freeze

  attr_reader :size

  def initialize(size)
    @size = size.to_s.upcase
  end

  def to_s
    @size
  end

  def &lt;=&gt;(other)
    position &lt;=&gt; other.position
  end

  protected

  def position
    SIZES.index(size)
  end
end

describe Size do
  let(:sizes) { %w[L S M].map { |s| Size.new(s) } }

  it { sizes.sort.map(&amp;:to_s).must_equal %w[S M L] }
  it { sizes.sort { |a,b| b &lt;=&gt; a }.map(&amp;:to_s).must_equal %w[L M S] }

  let(:a) { Size.new('S') }
  let(:b) { Size.new('M') }

  it { (a &gt; b).must_equal false }
  it { (a &lt; b).must_equal true }
  it { (a &gt;= b).must_equal false }
  it { (a &lt;= b).must_equal true }
  it { (a == b).must_equal false }
end

$&gt; ruby size.rb                                                                                                     [2.1.2]
Run options: --seed 44807

# Running:

.......

Finished in 0.001490s, 4698.8003 runs/s, 4698.8003 assertions/s.

7 runs, 7 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p><em>Exercise:</em>  Software versions often follow the convention <code>major.minor.patch</code>. Create a <code>Version</code> class
that takes a string version, e.g. &ldquo;10.10.3&rdquo; and implement the <code>&lt;=&gt;</code> operator.</p>

<p>I&rsquo;m currently reading <code>Effective Ruby</code> by Peter Jones and this post is based on Item 13: Implement
Comparison via &ldquo;&lt;=>&rdquo; and the Comparable Module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You can't handle the truth]]></title>
    <link href="http:///you-cant-handle-the-truth/"/>
    <updated>2016-02-15T16:21:58-08:00</updated>
    <id>http:///you-cant-handle-the-truth</id>
    <content type="html"><![CDATA[<p>Quick question. What’s the output of this code in Ruby?</p>

<pre><code>amount = 0
if amount
  puts 'hey'
else
  puts ‘nah'
end
</code></pre>

<p>If you answered <code>nah</code>, you’re wrong. But it’s fine because this is one of the biggest gotchas for developers who are new to Ruby. Heck, even seasoned developers like myself sometimes forget this. I blame my college CS professors for putting too much <code>C</code> syntax in my brain.</p>

<p>Ruby has a simple rule for dealing with boolean values:  everything is true except <code>false</code> and <code>nil</code>.  This also means that every expression and object in Ruby can be evaluated against true or false. For example, you can have a method <code>find</code> that returns an object when it finds one or <code>nil</code> otherwise.</p>

<pre><code>if  o = Customer.find_by(email: ‘stevej@rip.com’)
  puts o.name
else
  puts ‘not found it'
end
</code></pre>

<p>But it’s a different story when returning a numeric value because 0 evaluates to true.</p>

<p><code>false</code> and <code>nil</code> can also be a common source of confusion because you have 2 values that can be false.  Consider the default behaviour of  Hash, which returns nil if the key does not exist. If you only factor in the <code>nil</code> scenario, you will have a problem when a key returns a <code>false</code> value - a common scenario with code that handles configuration or settings.
In the case below, this will output <code>missing key</code></p>

<pre><code>h = {'a' =&gt; 1, 'b' =&gt; false}
key = ‘b'
if h[key]
  puts 'found a value'
else
  puts 'missing key'
end
</code></pre>

<p>If that’s enough confusion for you, consider this:  <code>true</code>, <code>false</code>, and <code>nil</code> are just instances of a class.</p>

<pre><code>irb&gt; true.class
=&gt; TrueClass
irb&gt; false.class
=&gt; FalseClass
irb&gt; nil.class
=&gt; NilClass
</code></pre>

<p>They are global variables but you can’t set any value to it which is fine. Otherwise, there will be chaos!</p>

<pre><code>irb&gt; true = 1
SyntaxError: (irb):18: Can't assign to true
true = 1
</code></pre>

<p>But, this is Ruby and we can always introduce chaos. Matz, the creator of Ruby,  has given us this much power because he trusts that we know what we are doing.</p>

<pre><code>irb&gt; class Bad
irb&gt;   def ==(other)
irb&gt;     true
irb&gt;   end
irb&gt; end

irb&gt; false == Bad.new
=&gt; false
irb&gt; Bad.new == false
=&gt; true
</code></pre>

<p>What the heck just happened?  Well, <code>==</code> is just another method call - the first is for the <code>FalseClass</code> instance while the second is for the <code>Bad</code> instance.</p>

<p>If you have been using Ruby for a while and wants to become better at it, I suggest you
get a copy of <code>Effective Ruby</code> by Peter Jones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails #permitted]]></title>
    <link href="http:///rails-permitted/"/>
    <updated>2015-08-21T00:00:00-07:00</updated>
    <id>http:///rails-permitted</id>
    <content type="html"><![CDATA[<p>I recently upgraded a personal app I use for learning new things in Rails. But when I upgraded from
4.1.4 to 4.1.12 I encountered this familiar error.</p>

<pre><code>Customer.where(auth.slice(:provider, :uid)).first_or_initialize
ActiveModel::ForbiddenAttributesError: ActiveModel::ForbiddenAttributesError
from /Users/greg/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/activemodel-4.1.12/lib/active_model/forbidden_attributes_protection.rb:21:in `sanitize_for_mass_assignment`
</code></pre>

<p>Now I remember. It&rsquo;s one of those mass assignments where you have to specify the &lsquo;permitted&rsquo; values before you can continue. In Rails 4, it&rsquo;s good practice
to whitelist the attributes you receive in the controller and it goes something like this:</p>

<pre><code>def user_params
  params.require(:user).permit(:username, :email, :password)
end

# somewhere in the controller
Customer.create(user_params)
</code></pre>

<p>Now, let&rsquo;s use this idiom. It should be easy, right?</p>

<pre><code>&gt; auth.permit(:provider, :uid)
=&gt; nil
</code></pre>

<p>Wait, that didn&rsquo;t go as expected. How about just simply composing the hash?</p>

<pre><code>&gt; Customer.where(provider: auth[:provider], uid: auth[:uid]).first_or_initialize
=&gt; #&lt;Customer:0x007fd9168ffa88&gt;
</code></pre>

<p>Interesting. #permit returns nil, using plain hash works, and #slice doesn&rsquo;t.</p>

<pre><code>&gt; auth.slice(:provider, :uid).class
=&gt; OmniAuth::AuthHash &lt; Hashie::Mash
</code></pre>

<p>It shouldn&rsquo;t matter what auth is as long as it behaves like what the Customer model expects. But what
does the Customer model expects? Actually, the error message is telling us what it expects. In Rails,
there is this module for mass assignment protection:</p>

<pre><code># https://github.com/rails/rails/blob/master/activemodel/lib/active_model/forbidden_attributes_protection.rb
module ActiveModel
  # Raised when forbidden attributes are used for mass assignment.
  #
  #   class Person &lt; ActiveRecord::Base
  #   end
  #
  #   params = ActionController::Parameters.new(name: 'Bob')
  #   Person.new(params)
  #   # =&gt; ActiveModel::ForbiddenAttributesError
  #
  #   params.permit!
  #   Person.new(params)
  #   # =&gt; #&lt;Person id: nil, name: "Bob"&gt;
  class ForbiddenAttributesError &lt; StandardError
  end

  module ForbiddenAttributesProtection # :nodoc:
    protected
      def sanitize_for_mass_assignment(attributes)
        if attributes.respond_to?(:permitted?) &amp;&amp; !attributes.permitted?
          raise ActiveModel::ForbiddenAttributesError
        else
          attributes
        end
      end
      alias :sanitize_forbidden_attributes :sanitize_for_mass_assignment
  end
end
</code></pre>

<p>Nothing fancy here. Rails does a simple check whether to allow mass assignment or not.</p>

<pre><code>&gt; auth.slice(:provider, :uid).permitted?
=&gt; false

&gt; { provider: auth[:provider], uid: auth[:uid] }.permitted?
NoMethodError: undefined method `permitted?' for {:provider=&gt;"facebook", :uid=&gt;"123"}:Hash
</code></pre>

<p>OmniAuth::AuthHash does not even allow it. Plain Hash works because it doesn&rsquo;t even respond to #permitted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 4]]></title>
    <link href="http:///rebuild-rails-part4/"/>
    <updated>2014-11-24T00:00:00-08:00</updated>
    <id>http:///rebuild-rails-part4</id>
    <content type="html"><![CDATA[<p>Now, it is time to build real pages in our super duper Tracks framework. We will support ERB and to do that
we need the <a href="https://rubygems.org/gems/erubis">erubis</a> gem.</p>

<pre><code># app/controllers/posts_controller.rb
class PostsController &lt; Tracks::Controller
  def index
    locals = { title: "/posts/index" }
    render template: "posts/index", locals: locals
  end
end

# app/views/posts/index.html.erb
hello from tracks &lt;%= title %&gt;

# lib/tracks/controller.rb
def render(options)
  template_name = options.fetch(:template)
  locals = options.fetch(:locals)

  filename = File.join "app/views", "#{template_name}.html.erb"
  template = File.read(filename)
  erb = Erubis::Eruby.new(template)
  erb.result locals
end

$ ruby spec/application_spec.rb
Run options: --seed 12593

# Running:

..

Finished in 0.020498s, 97.5705 runs/s, 195.1410 assertions/s.

2 runs, 4 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p>Our tests show we are good but it&rsquo;s not even close to Rails' &ldquo;magic&rdquo;. First, let&rsquo;s
use the <code>controller/action</code> convention, i.e. if no template is passed to the <code>render</code> method,
we should use the <code>app/views/posts/index.html.erb</code> template. We also modify our <code>Controller</code> to save
the <code>env</code> data passed by <code>Rack</code> because we need to check the path.</p>

<pre><code># lib/tracks/controller.rb
module Tracks
  class Controller
    attr_reader :env, :controller_name, :action_name

    def initialize(env)
      @env = env
      extract_env_info
    end

    def extract_env_info
      _, @controller_name, @action_name, after = path_info.split("/")
    end

    def path_info
      env["PATH_INFO"]
    end

    def extract_template_name
      "#{controller_name}/#{action_name}"
    end
  end
end
</code></pre>

<p>We then update our <code>render</code> method to check for the template if it is not passed.</p>

<pre><code># lib/tracks/controller.rb
     def render(options)
-      template_name = options.fetch(:template)
+      template_name = options.fetch(:template) { extract_template_name }
       locals = options.fetch(:locals)

       filename = File.join "app/views", "#{template_name}.html.erb"
@@ -29,6 +43,5 @@ module Tracks
       erb.result locals
     end
</code></pre>

<p>Our next modification involves using the @instance_variables to pass values from the
controller to the view files. To do that, we just need to pass the current <code>binding</code> to
the <code>eruby</code> instance and it should pickup the instance variables we have in the controller.</p>

<p>In Rails, it is a bit more involved. There is a concept of <a href="https://github.com/rails/rails/blob/0c5552a3dd28e35cce64462765cc41c5355db0f1/actionpack/lib/abstract_controller/rendering.rb#L84-L86">view context</a>. Rails
collects the instance variables from the controller, then duplicates the values into the view context.
The Ruby methods <code>#instance_variables</code>, <code>#instance_variable_get</code>, <code>#instance_variable_set</code> allow
Rails to accomplish that.</p>

<pre><code>def render(options={})
  template_name = options.fetch(:template) { extract_template_name }
  filename = File.join "app/views", "#{template_name}.html.erb"
  template = File.read(filename)
  erb = Erubis::Eruby.new(template)
  erb.result(binding)
end
</code></pre>

<p>We also update our <code>render</code> method and controller because we do not need the <code>locals</code> parameter.</p>

<pre><code># app/controllers/posts_controller.rb
class PostsController &lt; Tracks::Controller
  def index
    @title = "/posts/index"
    render
  end
end

# app/views/posts/index.html.erb
hello from tracks &lt;%= @title %&gt;
</code></pre>

<p>We still have the extra <code>render</code> call in our controller. To remove it, we keep track of the call
to render and if there&rsquo;s no rendered result yet, we call <code>render</code>.</p>

<pre><code>diff --git i/app/controllers/posts_controller.rb w/app/controllers/posts_controller.rb
index f7883e3..d7aa012 100644
--- i/app/controllers/posts_controller.rb
+++ w/app/controllers/posts_controller.rb
@@ -1,6 +1,5 @@
 class PostsController &lt; Tracks::Controller
   def index
     @title = "/posts/index"
-    render
   end
 end
diff --git i/lib/tracks/controller.rb w/lib/tracks/controller.rb
index 0119c1b..3d5d75a 100644
--- i/lib/tracks/controller.rb
+++ w/lib/tracks/controller.rb
@@ -30,7 +30,12 @@ module Tracks

       controller_class_name = controller.capitalize + "Controller"
       controller_class = Object.const_get(controller_class_name)
-      controller_class.new(env).send(action)
+      controller_context = controller_class.new(env)
+      controller_context.send(action)
+
+      if controller_context.rendered_string.nil?
+        controller_context.render
+      end
+
+      controller_context.rendered_string
     end

     def render(options={})
@@ -38,7 +43,7 @@ module Tracks
       filename = File.join "app/views", "#{template_name}.html.erb"
       template = File.read(filename)
       erb = Erubis::Eruby.new(template)
-      erb.result(binding)
+      @rendered_string = erb.result(binding)
     end
</code></pre>

<p>We also update our controller and tests to cover the case of using <code>render</code> explicitly.</p>

<pre><code># app/controllers/posts_controller.rb
class PostsController &lt; Tracks::Controller
  def index
    @title = "/posts/index"
  end

  def show
    @title = "/posts/index"
    render template: "posts/index"
  end
end

# spec/application_spec.rb
require_relative "spec_helper"

describe CrazyApp::Application do
  include Rack::Test::Methods

  def app
    CrazyApp::Application
  end

  it "should respond with /" do
    get "/"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from index.html"
  end

  it "should respond with different path" do
    get "/posts/index"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from tracks /posts/index"
  end

  it "should respond with different template" do
    get "/posts/show"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from tracks /posts/index"
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 3]]></title>
    <link href="http:///rebuild-rails-part3/"/>
    <updated>2014-11-20T00:00:00-08:00</updated>
    <id>http:///rebuild-rails-part3</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s continue our rebuild rails series by supporting controllers. We simplify things
by assuming a <code>controller/action</code> path format and only support <code>GET</code> request.</p>

<p>We adjust our <code>.call</code> implementation to handle the new path format. We also introduce
another method <code>#render_controller_action</code> that inspects the <code>path_info</code>
and instantiates the right controller using Rails <code>NameController</code> convention.</p>

<pre><code># lib/tracks.rb
def self.call(env)
  path_info = env["PATH_INFO"]
  if  path_info == "/"
    text = Tracks::Controller.render_default_root
  else
    text = Tracks::Controller.render_controller_action(env)
  end

  [200, {"Content-Type" =&gt; "text/html"}, [text] ]
end

# lib/tracks/controller.rb
def self.render_controller_action(env)
  path_info = env["PATH_INFO"]
  _, controller, action, after = path_info.split("/")

  controller_class_name = controller.capitalize + "Controller"
  controller_class = Object.const_get(controller_class_name)
  controller_class.new.send(action)
end

$ ruby spec/application_spec.rb
Run options: --seed 55835
# Running:

.E

Finished in 0.015837s, 126.2865 runs/s, 126.2865 assertions/s.

  1) Error:
CrazyApp::Application#test_0002_should respond with different path:
NameError: uninitialized constant PostsController
    /code/crazy/lib/tracks/controller.rb:13:in `const_get'
</code></pre>

<p>When we run the test, you see it failed on <code>PostsController</code> which is what
we expect since we haven&rsquo;t implemented <code>PostsController</code> yet. Let&rsquo;s add the
controller now.</p>

<pre><code># app/controllers/posts_controller.rb
class PostsController &lt; Tracks::Controller
  def index
    "hello from tracks /posts/index"
  end
end

# config/application.rb
require "./app/controllers/posts_controller"

$ ruby spec/application_spec.rb
Run options: --seed 2475

# Running:
..

Finished in 0.019152s, 104.4277 runs/s, 208.8555 assertions/s.

2 runs, 4 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<h3>Automatic loading</h3>

<p>Our tests pass but something&rsquo;s not right. In Rails, there is no need to require
every controller (or pretty much anything) to make it work. To support this feature in
our framework, we need 2 things:</p>

<ul>
<li>convert PostsController to posts_controller.rb; and</li>
<li>auto-require &lsquo;posts_controller&rsquo;</li>
</ul>


<p>To tie these 2 together, we tap into <code>Object.const_missing</code> so our framework would
know if a class has been used but not yet loaded.</p>

<p>We also update the <code>$LOAD_PATH</code> to include <code>app/controllers</code> folder so Ruby knows
where to look.</p>

<pre><code># lib/tracks.rb
require File.expand_path("../tracks/helper", __FILE__)
require File.expand_path("../tracks/object", __FILE__)

# config/application.rb
require './lib/tracks'
$LOAD_PATH &lt;&lt; File.expand_path("../../app/controllers", __FILE__)

module CrazyApp
  class Application &lt; Tracks::Application
  end
end

# lib/tracks/helper.rb
module Tracks
  module Helper
    def self.to_underscore(string)
      string.scan(/[A-Z][a-z]+/).
      join('_').
      downcase
    end
  end
end

# lib/tracks/object.rb
class Object
  def self.const_missing(c)
    require Tracks::Helper.to_underscore(c.to_s)
    const_get(c)
  end
end
</code></pre>

<p>Our implementation of <code>.to_underscore</code> is limited compared to what&rsquo;s supported in Rails.</p>

<pre><code>irb(main):019:0&gt; s = "PostsController"
=&gt; "PostsController"
irb(main):020:0&gt; s.scan(/[A-Z][a-z]+/).join('_').downcase
=&gt; "posts_controller"
</code></pre>

<p>Also, since we call <code>const_get</code> inside <code>const_missing</code>, you will run into serious
trouble if your file does not contain the expected class. Try changing the name of the
class inside <code>app/controllers/posts_controller.rb</code> into something else and you will get this
error.</p>

<pre><code>$ ruby spec/application_spec.rb
Run options: --seed 60433

# Running:

.E
Finished in 0.043152s, 46.3478 runs/s, 46.3478 assertions/s.

  1) Error:
CrazyApp::Application#test_0002_should respond with different path:
SystemStackError: stack level too deep
    /Users/greg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/forwardable.rb:174

2 runs, 2 assertions, 0 failures, 1 errors, 0 skips
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 2]]></title>
    <link href="http:///rebuild-rails-part2/"/>
    <updated>2014-11-19T00:00:00-08:00</updated>
    <id>http:///rebuild-rails-part2</id>
    <content type="html"><![CDATA[<p>Before we continue with out rebuilding series, we should write some tests first :)</p>

<pre><code># spec/spec_helper.rb
ENV["RAILS_ENV"] ||= "test"

require "rack/test"
require "minitest/autorun"

require File.expand_path("../../config/application", __FILE__)


# spec/application_spec.rb
require_relative "spec_helper"

describe CrazyApp::Application do
  include Rack::Test::Methods

  def app
    CrazyApp::Application
  end

  it "should respond with /" do
    get "/"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from index.html"
  end

  it "should respond with different path" do
    get "/posts"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from tracks /posts"
  end

end
</code></pre>

<p>Just like your typical Rails test setup, we have a common <code>spec_helper</code> file. We use <code>minitest/autorun</code> which gives us
rspec-style DSL out of the box. For our test, we need <code>Rack::Test::Methods</code> to use <code>get</code> and other http methods. We also
need an <code>app</code> method that returns our Rack application to make the tests work.</p>

<pre><code>$ ruby spec/application_spec.rb
Run options: --seed 57256

# Running:
..

Finished in 0.015864s, 126.0716 runs/s, 252.1432 assertions/s.

2 runs, 4 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p>We&rsquo;re all good. Awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#ruby Array of hashes quiz]]></title>
    <link href="http:///ruby-array-of-hashes-quiz/"/>
    <updated>2014-11-17T00:00:00-08:00</updated>
    <id>http:///ruby-array-of-hashes-quiz</id>
    <content type="html"><![CDATA[<p>Found this interesting ruby quiz from <a href="http://www.alphasights.com/careers/experienced/positions/new-york/6-ruby-on-rails-developer/apply">AlphaSights</a>.
Given an array of hashes, collapse into an array of hashes containing one entry per day.
And you can only reference the <code>:time</code> key and not the rest.</p>

<pre><code>log = [
  {time: 201201, x: 2},
  {time: 201201, y: 7},
  {time: 201201, z: 2},
  {time: 201202, a: 3},
  {time: 201202, b: 4},
  {time: 201202, c: 0}
]

# result should be
[
  {time: 201201, x: 2, y: 7, z: 2},
  {time: 201202, a: 3, b: 4, c: 0},
]
</code></pre>

<p>The first thing came to mind is to use <a href="http://www.ruby-doc.org/core-2.1.1/Enumerable.html#method-i-group_by"><code>Enumerable#group_by</code></a></p>

<pre><code>grouped = log.group_by { |i| i[:time] }
collapsed = grouped.collect do |t, a|
  no_time_h = a.inject({}) do |others, h|
    others.merge h.reject { |k, v| k.to_sym == :time }
  end

  {time: t}.merge(no_time_h)
end

puts collapsed.inspect
</code></pre>

<p>However, after reading this a couple of times, I still find the solution hard to follow.
For starter, <code>group_by</code> returns a hash where the values are an array of hashes which
brings me back to the original problem even though it is already grouped by time.
That I feel made the rest of the code more complicated.</p>

<pre><code># result of group_by
{201201=&gt;[{:time=&gt;201201, :x=&gt;2}, {:time=&gt;201201, :y=&gt;7}, {:time=&gt;201201, :z=&gt;2}], 201202=&gt;[{:time=&gt;201202, :a=&gt;3}, {:time=&gt;201202, :b=&gt;4}, {:time=&gt;201202, :c=&gt;0}]}
</code></pre>

<p>For my second version, I simply loop into the array and compose the hash using <code>:time</code> as the key.
Afterwards, use the <code>key-value</code> pair to compose the resulting array. The code may be longer but
it is more readable. Remember, <a href="https://www.safaribooksonline.com/library/view/beautiful-code/9780596510046/ch05.html">Correct, Beautiful, Fast (in That Order)</a>.</p>

<pre><code>hash_by_time = {}
log.each do |h|
  time = h[:time]
  others = h.reject { |k,v| k.to_sym == :time }

  if hash_by_time[time]
    hash_by_time[time].merge! others
  else
    hash_by_time[time] = others
  end
end

collapsed = hash_by_time.collect do |k, v|
  {time: k}.merge(v)
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To the crazy ones]]></title>
    <link href="http:///to-the-crazy-ones/"/>
    <updated>2014-11-16T00:00:00-08:00</updated>
    <id>http:///to-the-crazy-ones</id>
    <content type="html"><![CDATA[<p>Though I&rsquo;ve seen this video a gazillion times, I still find it fresh and inspiring.</p>

<p><a href="http://www.youtube.com/watch?v=tjgtLSHhTPg" title="To The Crazy Ones"><img src="http://img.youtube.com/vi/tjgtLSHhTPg/0.jpg" alt="To The Crazy Ones" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 1]]></title>
    <link href="http:///rebuild-rails-part1/"/>
    <updated>2014-11-16T00:00:00-08:00</updated>
    <id>http:///rebuild-rails-part1</id>
    <content type="html"><![CDATA[<p>I have no plans to build another Rails-clone. Let&rsquo;s leave that work to other smarter people with more time.
But wouldn&rsquo;t it be fun if we can learn how Rails work under the hood and find out what makes it &ldquo;magical&rdquo;?
In this post I will only cover what happens when you typed that url until you get an HTML page. We&rsquo;ll simplify further by not using any database
access. If you would like to go deeper and wider, there is a <a href="https://rebuilding-rails.com/">book devoted entirely to it that I highly recommend</a>.</p>

<p>Let&rsquo;s call our application <code>CrazyApp</code> and let&rsquo;s build our first web app.</p>

<pre><code># config.ru
app =  proc do |env|
  [200, {'Content-Type' =&gt; 'text/html'}, ["hello from crazy app"] ]
end

run app

$ rackup config.ru -p 3000                                                                       [2.0.0-p247]
Thin web server (v1.6.2 codename Doc Brown)
Maximum connections set to 1024
Listening on 0.0.0.0:3000, CTRL+C to stop
127.0.0.1 - - [16/Nov/2014 20:42:02] "GET / HTTP/1.1" 200 - 0.0008
</code></pre>

<h3>It&rsquo;s all about the Rack</h3>

<p>Rack is a gem that sits between your framework (e.g. Rails) and Ruby-based
application servers like Thin, Puma, Unicorn, and WEBrick. When you type a url,
it goes through several layers of software until it hits our application which
in this case just returns a <code>hellow from crazy app</code>. Rack simplifies the interface
for web servers that we only have to worry about a few things to handle an HTTP request.</p>

<ul>
<li>HTTP status, e.g. 200</li>
<li>Response headers. There are lot of things you can set here but for now let&rsquo;s stick to content-type.</li>
<li>Actual content. In our case, an HTML page.</li>
</ul>


<p>Let&rsquo;s look at a boilerplate <code>config.ru</code> that you get from Rails.</p>

<pre><code># This file is used by Rack-based servers to start the application.

require ::File.expand_path('../config/environment',  __FILE__)
run Rails.application
</code></pre>

<p>One step in <a href="http://api.rubyonrails.org/classes/Rails/Application.html">Rails' bootup process</a> is to
define <code>Rails.application</code> as <code>class MyApp::Application &lt; Rails::Application</code>.
Both <code>Rails::Application</code> and <code>proc</code> provides a <code>call</code> method that is why both <code>config.ru</code> works.</p>

<p>Now, let&rsquo;s move our initial <code>config.ru</code> code to a different class that we can later extract into
a gem for our framework that we shall call <code>Tracks</code>. From here on, we shall follow Rails conventions
and build our gem from there.</p>

<pre><code># config.ru
require './config/application'
run CrazyApp::Application

# config/application.rb
require './lib/tracks'

module CrazyApp
  class Application &lt; Tracks::Application
  end
end

# lib/tracks.rb
module Tracks
  class Application
    def self.call(env)
      [200, {'Content-Type' =&gt; 'text/html'}, ["hello from tracks"] ]
    end
  end
end
</code></pre>

<p>Exit from your rackup process and re-run it because we are not supporting auto-reloading. This time you will see a message from our <code>Tracks</code> - the super awesome Rails-like framework.</p>

<h3>Render a default page</h3>

<p>We now introduce a very simple root controller and use it to render a default index page. We also modify our route handling
by inspecting the value in <code>env</code> object that Rack passed to our framework. The <code>env</code> packs a lot of information about
a request and for our routing, we are interested in <code>PATH_INFO</code> which is the url after the domain minus the query parameters.</p>

<pre><code># lib/tracks/controlle.rb
module Tracks
  class Controller
    def self.render_default_root
      filename = File.join('public', 'index.html')
      File.read filename
    end
  end
end


# lib/tracks.rb
require File.expand_path('../tracks/controller', __FILE__)

module Tracks
  class Application
    def self.call(env)
      path_info = env['PATH_INFO']
      if  path_info == '/'
        text = Tracks::Controller.render_default_root
      else
        text = "hello from tracks #{path_info}"
      end

      [200, {'Content-Type' =&gt; 'text/html'}, [text] ]
    end
  end
end
</code></pre>

<p>That&rsquo;s it for now. Next time, we will create our own controllers, action, and dynamic pages using ERB.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#ruby Counting Vowels]]></title>
    <link href="http:///ruby-minimal-code/"/>
    <updated>2014-11-13T00:00:00-08:00</updated>
    <id>http:///ruby-minimal-code</id>
    <content type="html"><![CDATA[<p>Just saw a simple exercise in my Facebook feed and I thought I give it a shot. The problem is simple:</p>

<blockquote><p>Write a function that returns the number of vowels in the string.</p></blockquote>

<p>Here&rsquo;s my ruby solution:</p>

<pre><code>  require 'minitest/autorun'

  def vowel_count(s)
    vowels = %w[a e i o u]
    s.to_s.scan(/\w/).select { |i| i if vowels.include?(i.downcase) }.count
  end

  describe "#vowel_count" do
    it "should count upcase lowercase" do
      test = "I wanted to be an astronaut"
      vowel_count(test).must_equal 10
    end

    it "should be zero for empty string" do
      vowel_count("").must_equal 0
    end

    it "should be zero for nil" do
      vowel_count(nil).must_equal 0
    end
  end
</code></pre>

<p>Sounds simple, right? But there are subtle things you should watch out for.</p>

<ul>
<li><em>Upper and lower cases</em> may seem trivial but programmers are often bitten by these when comparing strings.</li>
<li>An initial solution would be to access each character via [index] and increment a counter for vowels.
Here is where familiarity with your language&rsquo;s libraries becomes useful.
While I didn&rsquo;t get the right method initially, I know Ruby&rsquo;s String library offers a way
to extract regex matches. From then on, it&rsquo;s just a matter of using <code>Enumerable#select</code>
which is a common Ruby idiom for filtering elements.</li>
<li>Having tests even for a simple code is a good discipline to have. My initial test only
covers the functional requirement. When I added the case of nil it quickly showed
the flaw in my code, which brings me to my next point.</li>
<li>Produce sensible results as much as possible. While you can argue the requirement
states a string and not a nil, it is good habit to defend your code in case the caller
passed an invalid value. Hence, I converted the parameter to a string to ensure the
rest of the code is working with a string object and it gives a sensible result even
if the passed parameter is not a string.</li>
</ul>


<h3>Minimalist testing</h3>

<p>If you are working with Rails' for a while, you probably been pampered with Rails seamless
integration with testing frameworks you&rsquo;ll be forgiven if you think these support
are only available within Rails.</p>

<p>Ruby comes with <code>minitest/autorun</code> that supports a minimalist testing framework. Just require in your code and you are
good to go with rspec-style testing right off the bat.</p>

<pre><code>$ ruby vowelcount.rb
Run options: --seed 47907

# Running:

...

Finished in 0.001155s, 2597.4026 runs/s, 2597.4026 assertions/s.

3 runs, 3 assertions, 0 failures, 0 errors, 0 skips
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#hacking  Ansible]]></title>
    <link href="http:///hacking-ansible/"/>
    <updated>2014-10-17T21:02:43-07:00</updated>
    <id>http:///hacking-ansible</id>
    <content type="html"><![CDATA[<p>Before you continue, let me congratulate myself. It’s been years since I’ve written a post. Hooray! Also, thank you to <a href="https://github.com/radamanthus/ansible-rails">Rad</a> for guiding me on my Ansible adventure. The ansible code I reference here are <a href="https://github.com/gregmoreno/ansible-rails">available in github</a>.</p>

<p>There are tons of posts about Ansible already so this is more about gotchas I learned along the way.</p>

<h3>Variables</h3>

<p>Just like good coding, you should isolate things that will change. Store variables in vars/defaults.yml for things like initial database password, deployment directory, ruby version, and whatnot. I started out with using snake format but I later learned you can have a hierarchy for your variables as well, for example:</p>

<pre><code>app:
  name: google.app
</code></pre>

<p>Inside your tasks, you can reference it with . Of course, nothing prevents you from just simply naming your variable as app_name and use it as</p>

<h3>Hosts and groups</h3>

<p>You can use ansible to work on 1 or more servers at a time. These servers are specified in the hosts file (see hosts in the example). You can also group servers by using [groupname]. In the example below, you can have ansible target qa only (using the —limit option) and it will update the 2 servers you listed under the [qa] group.</p>

<pre><code>[local]
localhost ansible_python_interpreter=/usr/local/bin/python

[www]
www.yourapp.com

[staging]
staging.yourapp.com

[qa]
qa1.yourapp.com
qa2.yourapp.com
</code></pre>

<h3>Use roles</h3>

<p>Roles allow you to separate common tasks into sort of like modules giving you flexibility. Some use roles to group common tasks like ‘db’, ‘web’, etc. For starters like me and if you are playing with combining different software, I used roles to define specific software. I have a role named ‘mysql’, a role ‘nginx-puma’, or a role ‘nginx-passenger’. Over time, you may split the roles into functional distinctions like web, db, etc.</p>

<h3>Creating an EC2 instance</h3>

<p>In my example, just update the variables below (included in vars/defaults.yml) to suit your requirements.</p>

<pre><code>ec2_keypair: yourapp-www
ec2_instance_type: t1.micro
ec2_security_group: web-security-group
ec2_region: us-west-1
ec2_zone: us-west-1c
ec2_image: ami-f1fdfeb4 # Ubuntu Server 14.04 LTS (PV) 64-bit
ec2_instance_count: 1
</code></pre>

<p>You need your AWS_ACCESS_KEY, AWS_SECRET_KEY, and PEM file to create an instance. Creating the AWS access keys requires access to the IAM (Identity and Access Management).</p>

<p>When you’re ready, run the command:</p>

<pre><code>AWS_ACCESS_KEY="access" AWS_SECRET_KEY="secret" ansible-playbook -i hosts ec2.yml
</code></pre>

<p>I have set ec2.yml to run against ‘local’ group (specified in the ’hosts’ file) because you don’t have a host yet. The Ansible EC2 module is smart enough to know that you are still creating an instance at this point.</p>

<p>After running the playbook, notice that it creates a new entry in the [launched] group in your hosts file. The new entry points to the EC2 instance you just created. At this point, you now have a server to run the rest of the playbooks.</p>

<h3>Creating the deploy user</h3>

<p>When the instance is created, it would create a new user. In my project where I use Ubuntu, it creates an ‘ubuntu’ user. In other cases, it might only create ‘root’ user. Regardless, your next step is to create a ‘deploy’ user because it is not a good idea to keep using root. You can change the name of the deploy user (see vars/defaults.yml) but I prefer using ‘deploy’ because it is also the default user in capistrano and I’m a Rails guy.</p>

<pre><code>ansible-playbook -i hosts create-user.yml --user root --limit launched --private-key ~/.ssh/yourapp.pem
</code></pre>

<p>This playbook does several things:</p>

<ul>
<li>Creates the ‘deploy’ user.</li>
<li>Adds your ssh key to /home/deploy/.ssh/authorized_keys</li>
<li>Gives deploy sudo rights.</li>
<li>Disables ssh and password access for root.</li>
</ul>


<p>Note that I specified in the initial user ‘root’. Depending on the instance you just created it might be ‘ubuntu’ or some other initial user</p>

<h3>Creating an instance in other providers</h3>

<p>In Digital Ocean (and other similar providers), you can create an instance using their admin interface. The initial user is ‘root’ and you can specify a password and/or public key. If you forgot the public key, you must add it before you continue.</p>

<pre><code>scp ~/.ssh/id_rsa.pub root@yourapp.com:~/uploaded_key.pub
ssh root@staging.app.com
mkdir -m og-rwx .ssh
cat ~/uploaded_key.pub &gt;&gt; ~/.ssh/authorized_keys
</code></pre>

<h3>Bootstrapping</h3>

<p>Now that you have your deploy user, just run the command below, take a coffee, and come back after 30 mins. That’s how awesome ansible is.</p>

<pre><code>ansible-playbook -i hosts bootstrap.yml --limit launched
</code></pre>

<p>You may need to tweak the roles or update a specific server. For example, you’re testing an upgrade on a staging server. In that case, make sure you specify the corect host group in the —limit parameter</p>

<p>A few more things I learned with this exercise:</p>

<ul>
<li>I can set the file mode with mkdir.</li>
<li>Use <code>bash —login</code> to load login profile. When I ssh using ‘deploy@domain‘, my ruby gets loaded correctly. However, when using ansible (which uses ssh), my ruby is not loaded and thus, you will get errors like &lsquo;bundle not found&rsquo;.</li>
<li>I’m torn between using system ruby and chruby. On one hand, I feel like there is no need for chruby because this is a server and no need to switch rubies from time-to-time. On the other hand, why not try it and see how it works.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#ruby method_missing gotchas]]></title>
    <link href="http:///ruby-method-missing-gotchas/"/>
    <updated>2012-10-11T00:00:00-07:00</updated>
    <id>http:///ruby-method-missing-gotchas</id>
    <content type="html"><![CDATA[<h3>Forgetting &lsquo;super&rsquo; with &lsquo;method_missing&rsquo;</h3>

<p>&lsquo;method_missing&rsquo; is one of Ruby&rsquo;s power that makes frameworks like Rails seem magical. When you call a method in an object (or &ldquo;send a message to the object&rdquo;), the object executes the first method it finds. If the object can&rsquo;t find the method, it complains. This is pretty much what every modern programming language does. Except in Ruby you can guard against a non-existent method call by having the method &lsquo;method_missing&rsquo; in your object. If you are using Rails, this technique enables dynamic record finders like User.find_by_first_name.</p>

<pre><code>require "rspec"

class RadioActive
  def to_format(format)
    format
  end

  def method_missing(name, *args)
    if name.to_s =~ /^to_(\w+)$/
      to_format($1)
    end
  end
end

describe RadioActive do
  it "should respond to to_format" do
    format = stub
    subject.to_format(format).should == format
  end

  it "should respond to to_other_format" do
    subject.to_other_format.should == "other_format"
  end

  it "should raise a method missing" do
    expect do
      subject.undefined_method
    end.to raise_error
  end
end
</code></pre>

<p>However, improper use of &lsquo;method_missing&rsquo; can introduce bugs in your code that would be hard to track. To illustrate, our example code above intercepts methods whose name are in the &lsquo;to_name&rsquo; format. It works fine as our tests tell us except when we try to call an undefined method that does not follow the &ldquo;to_name&rdquo; format. The default behavior for undefined method is for the object to raise a NoMethodError exception.</p>

<pre><code>$ rspec method_missing_gotcha-01.rb
..F

Failures:

  1) RadioActive should raise a method missing
     Failure/Error: expect do
       expected Exception but nothing was raised
     # ./method_missing_gotcha-01.rb:30:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.00448 seconds
3 examples, 1 failure

Failed examples:

rspec ./method_missing_gotcha-01.rb:29 # RadioActive should raise a method missing
</code></pre>

<p>You can easily catch this bug if you have a test. It would be a different story if you just use your class straight away.</p>

<pre><code>irb(main):001:0&gt; require './method_missing_gotcha-01.rb'
=&gt; true
irb(main):002:0&gt; r = RadioActive.new
=&gt; #&lt;RadioActive:0x007fd232a4d8a8&gt;
irb(main):003:0&gt; r.to_format('json')
=&gt; "json"
irb(main):004:0&gt; r.to_json
=&gt; "json"
irb(main):005:0&gt; r.undefined
=&gt; nil
</code></pre>

<p>The undefined method just returns nil instead of raising an exception. When we defined our method_missing, we removed the default behavior accidentally. Oops!</p>

<p>Fortunately, the fix is easy. There is no need to raise the &lsquo;NoMethodError&rsquo; in your code. Instead, simply call &lsquo;super&rsquo; if you are not handling the method. Whether you have your own class or inheriting from another, do not forget to call &lsquo;super&rsquo; with your &lsquo;method_missing&rsquo;. And that would make our tests happy :)</p>

<pre><code>--- 1/method_missing_gotcha-01.rb
+++ 2/method_missing_gotcha-02.rb
@@ -9,6 +9,8 @@ class RadioActive
   def method_missing(name, *args)
     if name.to_s =~ /^to_(\w+)$/
       to_format($1)
+    else
+      super
     end
   end

$ rspec method_missing_gotcha-02.rb
...

Finished in 0.00414 seconds
3 examples, 0 failures
</code></pre>

<p>Calling &lsquo;super&rsquo; is not just for &lsquo;missing_method&rsquo;. You also need to do the same for the other hook methods like &lsquo;const_missing&rsquo;, &lsquo;append_features&rsquo;, or &lsquo;method_added&rsquo;.</p>

<h3>Forgetting respond_to?</h3>

<p>When we modified &lsquo;method_missing&rsquo;, we are essentially introducing ghost methods. They exist but you cannot see them. You can call them spirit methods if that suits your beliefs. In our example, we were able to use a method named &lsquo;to_json&rsquo; but if we look at the list of methods defined for RadioActive, we will not see a &lsquo;to_json&rsquo;.</p>

<pre><code>irb(main):002:0&gt; RadioActive.instance_methods(false)
=&gt; [:to_format, :method_missing]
irb(main):003:0&gt; r = RadioActive.new
=&gt; #&lt;RadioActive:0x007f88b2a151c0&gt;
irb(main):004:0&gt; r.respond_to?(:to_format)
=&gt; true
irb(main):005:0&gt; r.respond_to?(:to_json)
=&gt; false
</code></pre>

<p>Before we introduce a fix, let us first write a test that shows this bug. It&rsquo;s TDD time baby!</p>

<pre><code>@@ -32,4 +34,8 @@ describe RadioActive do
     end.to raise_error
   end

+  it "should respond_to? to_other format" do
+    subject.respond_to?(:to_other_format).should == true
+  end
+
 end

...F

Failures:

  1) RadioActive should respond_to? to_other format
     Failure/Error: subject.respond_to?(:to_other_format).should == true
       expected: true
            got: false (using ==)
     # ./method_missing_gotcha-02.rb:38:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.00444 seconds
4 examples, 1 failure

Failed examples:

rspec ./method_missing_gotcha-02.rb:37 # RadioActive should respond_to? to_other format
</code></pre>

<p>The fix is every time you modify &lsquo;method_missing&rsquo;, you also need to update &lsquo;respond_to?&rsquo;. And don&rsquo;t forget to include &lsquo;super&rsquo;.</p>

<pre><code>+  def respond_to?(name)
+    !!(name.to_s =~ /^to_/ || super)
+  end
+
 end
</code></pre>

<p>And with that, we are all green.</p>

<pre><code>....

Finished in 0.00443 seconds
4 examples, 0 failures
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining Twitter Data with Ruby - Visualizing User Mentions]]></title>
    <link href="http:///mining-twitter-data-with-ruby-visualizing-user-mentions/"/>
    <updated>2012-09-20T20:53:45-07:00</updated>
    <id>http:///mining-twitter-data-with-ruby-visualizing-user-mentions</id>
    <content type="html"><![CDATA[<p>In my <a href="http:///2012/09/05/mining-twitter-data-with-ruby-mongodb-and-map-reduce/">previous post on mining twitter data with ruby</a>, we laid our foundation for collecting and analyzing Twitter updates. We stored these updates in <a href="http://www.mongodb.org/">MongoDB</a> and used map-reduce to implement a simple counting of tweets.  In this post, we&rsquo;ll show relationships between users based on mentions inside the tweet.  Fortunately for us, there is no need to parse each tweet just to get a list of users mentioned in the tweet because Twitter provides the &ldquo;entities.mentions&rdquo; field that contains what we need. After we collected the &ldquo;who mentions who&rdquo;, we then construct a directed graph to represent these relationships and convert them to an image so we can actually see it.</p>

<p>First, we start with the aggregation of mentions per user. We will use the same code base as last time. So if this is your first time, I recommend reading my previous related post or you can <a href="https://github.com/gregmoreno/tweetminer">follow the changes in Github</a>. Note to self:  Convert this to an actual gem in the next post.</p>

<pre><code># user_mention.rb
module UserMention

  def mentions_by_user
    map_command = %q{
      function() {
        var mentions = this.entities.user_mentions,
            users = [];
        if (mentions.length &amp;gt; 0) {
          for(i in mentions) {
            users.push(mentions[i].id_str)
          }

          emit(this.user.id_str, { mentions: users });
        }
      }
    }

   reduce_command = %q{
      function(key, values) {
        var users = [];

        for(i in values) {
          users = users.concat(values[i].mentions);
        }

        return { mentions: users };
      }
    }

    options = {:out =&gt; {:inline =&gt; 1}, :raw =&gt; true, :limit =&gt; 50 }
    statuses.map_reduce(map_command, reduce_command, options)
 end

end
</code></pre>

<p>We then again use map-reduce in MongoDB to implement our aggregation. Of course, this sort of thing can be done in Ruby directly but it would be way more efficient if we do it in MongoDB especially if you have a big collection to process.  Note that we limit the number of documents to process because we don&rsquo;t want our graph to look unrecognizable when we display it.</p>

<p>Now that we have our aggregation working, we construct a directed graph of user mentions using the <a href="http://rgl.rubyforge.org/rgl/index.html">rgl library</a>.</p>

<pre><code>require "bundler"
Bundler.require
require File.expand_path("../tweetminer", __FILE__)
settings = YAML.load_file File.expand_path("../mongo.yml", __FILE__)
miner = TweetMiner.new(settings)

require "rgl/adjacency"
require "rgl/dot"

graph = RGL::DirectedAdjacencyGraph.new
miner.mentions_by_user.fetch("results").each do |user|
  user.fetch("value").fetch("mentions").each do |mention|
    graph.add_edge(user.fetch("_id"), mention)
  end
end

# creates graph.dot, graph.png
graph.write_to_graphic_file
</code></pre>

<p>Once you have the user-mentions relationships in a graph, you can do interesting things like who is connected to somebody and the degrees of separation. But for now, we are just interested in showing who mentioned whom.  Our sample program saves the graph to the file graph.dot (<a href="http://en.wikipedia.org/wiki/DOT_language">using the DOT language</a>) and PNG output. But the default PNG output is not laid out nicely. Instead, we will use the &ldquo;<a href="http://www.graphviz.org/">neato</a>&rdquo;  program to convert our graph.dot into a nice looking PNG file.</p>

<pre><code>$ neato -Tpng graph.dot -o mentions.png
</code></pre>

<p>When you view &ldquo;mentions.png&rdquo;, you should see something similar as the one below. The labels are user IDs and the arrows show the mentioned users.</p>

<p>It would be cool to modify our program to use the users' avatars and also make it interactive. Or, use Twitter&rsquo;s streaming API and create an auto-update graph. I haven&rsquo;t done any research yet but I&rsquo;m sure there is some Javascript library out there that can help us display graph relationships.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining Twitter data with Ruby, MongoDB and Map-Reduce]]></title>
    <link href="http:///mining-twitter-data-with-ruby-mongodb-and-map-reduce/"/>
    <updated>2012-09-05T19:48:27-07:00</updated>
    <id>http:///mining-twitter-data-with-ruby-mongodb-and-map-reduce</id>
    <content type="html"><![CDATA[<p>When is the best time to tweet? If you care about reaching a lot of users, the best time probably is when your followers are also tweeting. In this exercise,we will try to figure out the day and time users are the most active.  Since there is no way for us to do this for all users in the twitterverse, we will only use the users we follow as our sample.</p>

<h3>What do we need</h3>

<ul>
<li><a href="http://www.mongodb.org/">mongodb</a></li>
<li><a href="https://github.com/intridea/tweetstream">tweetstream</a> gem</li>
<li>awesome_print gem for awesome printing of Ruby objects</li>
<li>oauth credentials</li>
</ul>


<p>Visit <a href="http://dev.twitter.com"><a href="http://dev.twitter.com">http://dev.twitter.com</a></a> to get your oauth credentials. You just need to login, create an app, and the oauth credentials you need will be there. Copy the oauth settings to the twitter.yml file because that is where our sample code will be looking.</p>

<h3>Collect status updates</h3>

<p>We use the Tweetstream gem to access the <a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming APIs</a> which allows our program to receive updates as they occur without the need to regularly poll Twitter.</p>

<pre><code># Collects user tweets and saves them to a mongodb
require 'bundler'
require File.dirname(__FILE__) + '/tweetminer'

Bundler.require

# We use the TweetStream gem to access Twitter's Streaming API
# https://github.com/intridea/tweetstream

TweetStream.configure do |config|
  settings = YAML.load_file File.dirname(__FILE__) + '/twitter.yml'

  config.consumer_key       = settings['consumer_key']
  config.consumer_secret    = settings['consumer_secret']
  config.oauth_token        = settings['oauth_token']
  config.oauth_token_secret = settings['oauth_token_secret']
end

settings = YAML.load_file File.dirname(__FILE__) + '/mongo.yml'
miner = TweetMiner.new(settings)stream = TweetStream::Client.new

stream.on_error do |msg|
  puts msg
end

stream.on_timeline_status do |status|
  miner.insert_status status
  print '.'
end

# Do not forget this to trigger the collection of tweets
stream.userstream
</code></pre>

<p>The code above handles the collection of status updates. The actual saving to mongodb is handled by the TweetMiner module.</p>

<pre><code># tweetminer.rb

require 'mongo'

class TweetMiner
  attr_writer :db_connector
  attr_reader :options

  def initialize(options)
    @options = options
  end

  def db
    @db ||= connect_to_db
  end

  def insert_status(status)
    statuses.insert status
  end

  def statuses
    @statuses ||= db['statuses']
  end

  private

  def connect_to_db
    db_connector.call(options['host'], options['port']).db(options['database'])
  end

  def db_connector
    @db_connector ||= Mongo::Connection.public_method :new
  end

 end
</code></pre>

<p>We will be modifying our code along the way and if you want follow each step, you can view this <a href="https://github.com/gregmoreno/tweetminer/commit/7d6e7ba3aa620c0a2ecc8495026056e043979510">commit at github</a>.</p>

<p>Depending on how active the people you follow, it may take a while before you get a good sample of tweets. Actually, it would be interesting if you could run the collection for several days.</p>

<p>Assuming we have several days' worth of data, let us proceed with the &ldquo;data mining&rdquo; part. Data mining would not be fun without a mention of map reduce - a strategy for data mining popularized by Google. The key innovation  with map reduce is its ability to take a query over a data set, divide it, and run it in parallel over many nodes. &ldquo;Counting&rdquo;, for example, is a task that fits nicely with the map reduce framework.  Imagine you and your friends are counting the number of people in a football stadium. First, you divide yourselves into 2 groups - group A counts the people in the lower deck while group B does the upper deck. Group A in turn divides the task into north, south, and endzones.  When group A is done counting, they tally all their results. After group B is done, they combine the results with group A for which the total gives us the number of people in the stadium.  Dividing your friends is the &ldquo;map&rdquo; part while the tallying of results is the &ldquo;reduce&rdquo; part.</p>

<h3>Updates per user</h3>

<p>First, let us do a simple task. Let us count the number of updates per user. We introduce a new module &lsquo;StatusCounter&rsquo; which we include in our TweetMiner module. We also add a new program to execute the map reduce task.</p>

<pre><code># counter.rb

require 'bundler'
Bundler.require
require File.dirname(__FILE__) + '/tweetminer'
settings = YAML.load_file File.dirname(__FILE__) + '/mongo.yml'

miner = TweetMiner.new(settings)

results = miner.status_count_by_user
ap results
</code></pre>

<p>Map reduce commands in mongodb are written in Javascript. When writing Javascript, just be conscious about string interpolation because Ruby sees it as a bunch of characters and nothing else. For the example below, we use the here document which interprets backslashes. In our later examples, we switch to single quotes when we use regular expressions within our Javascript.</p>

<pre><code>module StatusCounter
  class UserCounter
    def map_command
      &lt;&lt;-EOS
        function() {
          emit(this.user.id_str, 1);
        }
      EOS
    end

    def reduce_command
      &lt;&lt;-EOS
        function(key, values) {
          var count = 0;
          for(i in values) {
            count += values[i]
          }

          return count;
        }
      EOS
    end
  end

  def status_count_by_user
    counter = UserCounter.new
    statuses.map_reduce(counter.map_command, counter.reduce_command, default_mr_options)
  end

  def default_mr_options
    {:out =&gt; {:inline =&gt; 1}, :raw =&gt; true }
  end
 end
</code></pre>

<p><a href="https://github.com/gregmoreno/tweetminer/commit/ccc3c0b85f9023bdb04986b825b1932a815e35f2">Follow this commit</a> to view the changes from our previous examples.</p>

<p>When you run &lsquo;ruby counter.rb&rsquo;, you should see a similar screenshot as the one below:</p>

<h3>Tweets per Hour</h3>

<p>Now, let&rsquo;s do something a little bit harder than the previous example. This time,  we want to know how many tweets are posted per hour. Every tweet has a <em>created_at</em> field of type String. We then use a regular expression to extract the hour component.</p>

<pre><code>created_at:  'Tue Sep 04 22:04:40 +0000 2012'
regex:  (\d{2,2}):\d{2,2}:\d{2,2}
match: 22
</code></pre>

<p>The only significant change is the addition of a new map command. Note the reduce command did not change from the previous example. <a href="https://github.com/gregmoreno/tweetminer/commit/93d18d206c5ff0960c62d03cd1e2d3333a45e2fc">See the commit</a>.</p>

<pre><code>class HourOfDayCounter
  def map_command
    'function() {
      var re = /(\d{2,2}):\d{2,2}:\d{2,2}/;
      var hour = re.exec(this.created_at)[1];

      emit(hour, 1);
    }'
  end

  def reduce_command
    &amp;lt;&amp;lt;-EOS
      function(key, values) {
        var count = 0;

        for(i in values) {
          count += values[i]
        }

        return count;
      }
    EOS
  end

end

def status_count_by_hday
  counter = HourOfDayCounter.new
  statuses.map_reduce(counter.map_command, counter.reduce_command, default_mr_options)
end
</code></pre>

<p>Now run &lsquo;ruby counter.rb&rsquo; in the console with the new method and the result should be something like the one below.</p>

<p><img src="http:///assets/20120905-nck36r98kaftn7i3fpfh4i6her.jpg" alt="" /></p>

<h3>Filtering records</h3>

<p>Our examples so far include every status since the beginning of time, which is pretty much useless. What we want is to apply the counting tasks to statuses posted the past 7 days, for example. MongoDB allows you to <a href="http://www.mongodb.org/display/DOCS/MapReduce">pass a query to your map-reduce</a> so you can filter the data where the map-reduce is applied. One problem though: <em>created_at</em> field is a string. To get around this, we introduce a new field <em>created_at_dt</em> which is of type Date.  You can hook it up in the <em>insert_status</em> method but since we already have our data, we instead run a query (using MongoDB console) to update our records. Please note the collection we are using is <em>statuses</em> and the new field is <em>created_at_dt</em>.</p>

<pre><code>var cursor = db.statuses.find({ created_at_dt: { $exists: false } });
while (cursor.hasNext()) {
  var doc = cursor.next();
  db.statuses.update({ _id : doc._id }, { $set : { created_at_dt : new Date(doc.created_at) } } )
}
</code></pre>

<p>Now, that we have a Date field, let&rsquo;s modify our method to include a <em>days_ago</em> parameter and a query in our map reduce.</p>

<pre><code>def status_count_by_hday(days_ago = 7)
  date     = Date.today - days_ago
  days_ago = Time.utc(date.year, date.month, date.day)
  query = { 'created_at_dt' =&gt; { '$gte' =&gt; days_ago } }

  options = default_mr_options.merge(:query =&gt; query)

  counter = HourOfDayCounter.new
  statuses.map_reduce(counter.map_command, counter.reduce_command, options)
end
</code></pre>

<p>Since we&rsquo;re now getting the hang of it, why don&rsquo;t we add another complexity. This time, let us count by day of the week and include a breakdown per hour.  Luckily for us,  the day of the week is also included in the created_at field and it is just a matter of extracting it.  Of course, if Twitter decides to change the format, this will break. Let&rsquo;s visit <a href="http://rubular.com">rubular.com</a> and  try our regular expression.</p>

<p><img src="http:///assets/20120905-xfm9k1gsfrr7n4qnegue86pu1.jpg" alt="" /></p>

<p>Now that we have our regex working, let&rsquo;s include this in our new map command.</p>

<pre><code>def map_command
  'function() {
    var re = /(^\w{3,3}).+(\d{2,2}):\d{2,2}:\d{2,2}/;
    var matches = re.exec(this.created_at);

    var wday = matches[1],
        hday = matches[2];

    emit(wday, { count: 1, hdayBreakdown: [{ hday: hday, count: 1 }] });
  }'
end
</code></pre>

<p>Note the difference in the <em>emit</em> function from our previous examples. Before, we only emit a single numeric value that is why our reduce command is simple array loop.  This time, our reduce command requires more work.</p>

<pre><code>def reduce_command
  'function(key, values) {
     var total = 0,
         hdays = {},
         hdayBreakdown;

     for(i in values) {
       total += values[i].count

       hdayBreakdown = values[i].hdayBreakdown;

       for(j in hdayBreakdown) {
         hday  = hdayBreakdown[j].hday;
         count = hdayBreakdown[j].count;

         if( hdays[hday] == undefined ) {
           hdays[hday] = count;
         } else {
           hdays[hday] += count;
         }
       }
     }

     hdayBreakdown = [];
     for(k in hdays) {
       hdayBreakdown.push({ hday: k, count: hdays[k] })
     }

     return { count: total, hdayBreakdown: hdayBreakdown }
   }'
end
</code></pre>

<p>In our previous examples, the <em>values</em> parameter is a simple array of numeric values.  Now, it becomes an an array of properties. On top of that, one of the properties (i.e. hdayBreakdown) is also an array.  If everything works according to plan, you should see something like the image below when you run collect.rb.</p>

<p><img src="http:///assets/20120905-xpffryewtqchu875ap9fnk4kha.jpg" alt="" /></p>

<p>Did you have fun? I hope so :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding keyboard shortcuts in web pages]]></title>
    <link href="http:///adding-keyboard-shortcuts-in-web-pages/"/>
    <updated>2012-08-30T20:52:53-07:00</updated>
    <id>http:///adding-keyboard-shortcuts-in-web-pages</id>
    <content type="html"><![CDATA[<p>Adding keyboard shortcuts to interact with your web pages seems like a useless feature when the rest of the world is using a mouse. But for a programmer who wants everything to be a few keystrokes away, keyboard shortcuts are very handy.</p>

<p>In this tutorial, we will add a simple scrolling shortcuts to our webpage.  This is just to illustrate what is possible. So please, do not copy-and-paste this to your production code.</p>

<h3>What do we need?</h3>

<ul>
<li><a href="http://jquery.com/">jquery</a></li>
<li><a href="http://www.sinatrarb.com/">sinatra</a></li>
<li><a href="http://coffeescript.org/">coffeescript</a></li>
</ul>


<p>Actually, the only critical piece we need is jQuery and knowledge of Javascript. However, since I am more of a Ruby guy, we will use Sinatra to build the page and CoffeeScript to write the Javascript.</p>

<h3>Build the pages</h3>

<p>The screenshot below (left side) shows how our directory structure would look like. It is pretty much a standard Sinatra structure.</p>

<p>Our HTML page displays 10 entries where each is grouped under a &ldquo;div&rdquo; element with an  &ldquo;.entry&rdquo; class and an  ID.  We also add in some styling in our page to distinguish each entry.</p>

<pre><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
  &lt;title&gt;Index&lt;/title&gt;
  &lt;link rel="stylesheet" href="css/style.css"/&gt; &lt;script type="text/javascript" charset="utf-8" src="http://code.jquery.com/jquery-1.7.1.min.js"&gt;&lt;/script&gt;
  &lt;script type="text/javascript" charset="utf-8" src="js/app.js"&gt;
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;% 1.upto(10) do |i| %&gt;
    &lt;div id="&lt;%= "entry_#{i}" %&gt;"class="entry"&gt;
      &lt;%= "Title #{i}" %&gt;
      &lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>If everything is setup correctly, you should be able to run the app and see 10 entries.</p>

<pre><code>$ ruby app.rb
[2012-08-30 13:48:44] INFO WEBrick 1.3.1
[2012-08-30 13:48:44] INFO ruby 1.9.2 (2012-04-20) [x86_64-darwin12.1.0]
== Sinatra/1.3.3 has taken the stage on 4567 for development with backup from WEBrick
[2012-08-30 13:48:44] INFO WEBrick::HTTPServer#start: pid=12415 port=4567
</code></pre>

<p>Now for the juicy part. When the user presses &lsquo;j&rsquo;, we will scroll to the next entry while &lsquo;k&rsquo; scrolls to the previous. If you are a Vim user, you know why.</p>

<pre><code>current_entry = -1

$(document).keydown (e) -&gt;
  switch(e.keyCode)
  when 74 then scroll_to_next() # j
  when 75 then scroll_to_previous() # k

scroll_to_next = -&gt;
  #alert "scroll to next"
  current_entry++
  scroll_to_entry(current_entry)

scroll_to_previous = -&gt;
  if current_entry &gt; 0
    current_entry–
  scroll_to_entry(current_entry)

scroll_to_entry = (entry) -&gt;
  # Get the element we need to scroll to
  id = $(".entry")[entry].id
  $("html, body").animate { scrollTop: $("##{id}").offset().top }, "slow"
</code></pre>

<p>That&rsquo;s it! As I&rsquo;ve mentioned before, this is not production ready. For example, the shortcut should not interfere with other actions in your page like when the user is interacting with an input field. This also assumes the current visible entry is the first one.</p>

<p>This post is based from the book <a href="http://webdevelopmentrecipes.com/">Web Development Recipes</a>. If you are looking for quick reference on how to improve your project, I suggest reading the book.</p>
]]></content>
  </entry>
  
</feed>
