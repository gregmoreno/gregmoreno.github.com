<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Greg Moreno]]></title>
  <link href="http://gregmoreno.ca/atom.xml" rel="self"/>
  <link href="http://gregmoreno.ca/"/>
  <updated>2016-09-09T23:23:33-07:00</updated>
  <id>http://gregmoreno.ca/</id>
  <author>
    <name><![CDATA[Greg Moreno]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Joy Ride in Ruby's spaceship]]></title>
    <link href="http://gregmoreno.ca/blog/2016/02/16/joy-ride-in-rubys-spaceship/"/>
    <updated>2016-02-16T20:52:04-08:00</updated>
    <id>http://gregmoreno.ca/blog/2016/02/16/joy-ride-in-rubys-spaceship</id>
    <content type="html"><![CDATA[<p>Ruby&rsquo;s <code>&lt;=&gt;</code> operator is commonly referred to as the spaceship in the community. You may not have
played with it directly but I bet you have relied on it a lot of times. Because, every time you use
sort an array, you are tapping in to the spaceship operator.</p>

<p>Now, why would you care? Because sometimes we need to sort things which does not have a natural ordering
computers are accustomed to. Take for example sorting clothes that use S, M, and L to refer to their sizes.
And to add more fun, how about putting XS, XL, and XXL into the mix.</p>

<p>Let&rsquo;s start with a bare class and see what happens.</p>

<pre><code>require 'minitest/autorun'

class Size
  attr_reader :size

  def initialize(size)
    @size = size.to_s.upcase
  end

  def to_s
    @size
  end
end

describe Size do
  let(:sizes) { %w[L S M].map { |s| Size.new(s) } }
  it { sizes.sort.map(&amp;:to_s).must_equal %w[S M L] }

  let(:a) { Size.new('S') }
  let(:b) { Size.new('M') }

  it { (a &gt; b).must_equal false }
  it { (a &lt; b).must_equal true }
end

$&gt; ruby size.rb                                                                                                     [2.1.2]
Run options: --seed 37770

# Running:

EEE

Finished in 0.001207s, 2486.1356 runs/s, 0.0000 assertions/s.

  1) Error:
Size#test_0001_anonymous:
ArgumentError: comparison of Size with Size failed
    size.rb:24:in `sort'
    size.rb:24:in `block (2 levels) in &lt;main&gt;'


  2) Error:
Size#test_0002_anonymous:
NoMethodError: undefined method `&gt;' for #&lt;Size:0x007f8a7bae6c50 @size="S"&gt;
    size.rb:29:in `block (2 levels) in &lt;main&gt;'


  3) Error:
Size#test_0003_anonymous:
NoMethodError: undefined method `&lt;' for #&lt;Size:0x007f8a7bae6390 @size="S"&gt;
    size.rb:30:in `block (2 levels) in &lt;main&gt;'

3 runs, 0 assertions, 0 failures, 3 errors, 0 skips
</code></pre>

<p>Our test failed and that&rsquo;s good news, isn&rsquo;t it? The first failure is because the default
implementation of <code>&lt;=&gt;</code> doesn&rsquo;t do all the comparison required to make <code>sort</code> work. To make this
work, we need to implement a <code>&lt;=&gt;</code> that returns the following:</p>

<ul>
<li>nil if the comparison does not makes sense</li>
<li>-1 if left side is less than right side</li>
<li>1 if left side is greater than right side</li>
<li>0 if left and right are the same</li>
</ul>


<p>Let&rsquo;s update our code to use the spaceship.</p>

<pre><code>class Size
  attr_reader :size

  SIZES = %w[S M L].freeze

  def initialize(size)
    @size = size.to_s.upcase
  end

  def to_s
    @size
  end

  def &lt;=&gt;(other)
    position &lt;=&gt; other.position
  end

  protected

  def position
    SIZES.index(size)
  end
end
</code></pre>

<p>Some things to ponder in our implementation.</p>

<ul>
<li>In Ruby, operator calls are just method calls where the left side is the receiver and right side is
the argument. In other words, this is  <code>a &lt;=&gt; b</code> is the same as <code>a.&lt;=&gt;(b)</code></li>
<li>It is common practice to call the argument as <code>other</code> as you know the other object :)</li>
<li>We leverage an existing implementation of <code>&lt;=&gt;</code>. The method <code>#index</code> returns the position of an element
in the array, which is a <code>Fixnum</code>. The <code>Fixnum</code> class already knows how to compare numbers.</li>
<li>We use <code>protected</code> to hide an implementation detail but at the same time allow us to use it within instance
methods of objects of the same class.</li>
</ul>


<p>Now, how about the other test failures? Do we need to implement the <code>&lt;</code> and <code>&gt;</code> operators as well?
Fortunately, Ruby got our back. We just need to include the module <a href="http://ruby-doc.org/core-2.3.0/Comparable.html"><code>Comparable</code></a>
and we&rsquo;re good. But wait, there&rsquo;s more! By including the <code>Comparable</code> module, we also get
<code>&lt;=</code>, <code>&gt;=</code>, and <code>==</code> for free.</p>

<p>Here&rsquo;s the full implementation with additional test scenarios, including a reverse sort.</p>

<pre><code>require 'minitest/autorun'

class Size
  include Comparable

  SIZES = %w[S M L].freeze

  attr_reader :size

  def initialize(size)
    @size = size.to_s.upcase
  end

  def to_s
    @size
  end

  def &lt;=&gt;(other)
    position &lt;=&gt; other.position
  end

  protected

  def position
    SIZES.index(size)
  end
end

describe Size do
  let(:sizes) { %w[L S M].map { |s| Size.new(s) } }

  it { sizes.sort.map(&amp;:to_s).must_equal %w[S M L] }
  it { sizes.sort { |a,b| b &lt;=&gt; a }.map(&amp;:to_s).must_equal %w[L M S] }

  let(:a) { Size.new('S') }
  let(:b) { Size.new('M') }

  it { (a &gt; b).must_equal false }
  it { (a &lt; b).must_equal true }
  it { (a &gt;= b).must_equal false }
  it { (a &lt;= b).must_equal true }
  it { (a == b).must_equal false }
end

$&gt; ruby size.rb                                                                                                     [2.1.2]
Run options: --seed 44807

# Running:

.......

Finished in 0.001490s, 4698.8003 runs/s, 4698.8003 assertions/s.

7 runs, 7 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p><em>Exercise:</em>  Software versions often follow the convention <code>major.minor.patch</code>. Create a <code>Version</code> class
that takes a string version, e.g. &ldquo;10.10.3&rdquo; and implement the <code>&lt;=&gt;</code> operator.</p>

<p>I&rsquo;m currently reading <code>Effective Ruby</code> by Peter Jones and this post is based on Item 13: Implement
Comparison via &ldquo;&lt;=>&rdquo; and the Comparable Module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You can't handle the truth]]></title>
    <link href="http://gregmoreno.ca/blog/2016/02/15/you-cant-handle-the-truth/"/>
    <updated>2016-02-15T16:21:58-08:00</updated>
    <id>http://gregmoreno.ca/blog/2016/02/15/you-cant-handle-the-truth</id>
    <content type="html"><![CDATA[<p>Quick question. What’s the output of this code in Ruby?</p>

<pre><code>amount = 0
if amount
  puts 'hey'
else
  puts ‘nah'
end
</code></pre>

<p>If you answered <code>nah</code>, you’re wrong. But it’s fine because this is one of the biggest gotchas for developers who are new to Ruby. Heck, even seasoned developers like myself sometimes forget this. I blame my college CS professors for putting too much <code>C</code> syntax in my brain.</p>

<p>Ruby has a simple rule for dealing with boolean values:  everything is true except <code>false</code> and <code>nil</code>.  This also means that every expression and object in Ruby can be evaluated against true or false. For example, you can have a method <code>find</code> that returns an object when it finds one or <code>nil</code> otherwise.</p>

<pre><code>if  o = Customer.find_by(email: ‘stevej@rip.com’)
  puts o.name
else
  puts ‘not found it'
end
</code></pre>

<p>But it’s a different story when returning a numeric value because 0 evaluates to true.</p>

<p><code>false</code> and <code>nil</code> can also be a common source of confusion because you have 2 values that can be false.  Consider the default behaviour of  Hash, which returns nil if the key does not exist. If you only factor in the <code>nil</code> scenario, you will have a problem when a key returns a <code>false</code> value - a common scenario with code that handles configuration or settings.
In the case below, this will output <code>missing key</code></p>

<pre><code>h = {'a' =&gt; 1, 'b' =&gt; false}
key = ‘b'
if h[key]
  puts 'found a value'
else
  puts 'missing key'
end
</code></pre>

<p>If that’s enough confusion for you, consider this:  <code>true</code>, <code>false</code>, and <code>nil</code> are just instances of a class.</p>

<pre><code>irb&gt; true.class
=&gt; TrueClass
irb&gt; false.class
=&gt; FalseClass
irb&gt; nil.class
=&gt; NilClass
</code></pre>

<p>They are global variables but you can’t set any value to it which is fine. Otherwise, there will be chaos!</p>

<pre><code>irb&gt; true = 1
SyntaxError: (irb):18: Can't assign to true
true = 1
</code></pre>

<p>But, this is Ruby and we can always introduce chaos. Matz, the creator of Ruby,  has given us this much power because he trusts that we know what we are doing.</p>

<pre><code>irb&gt; class Bad
irb&gt;   def ==(other)
irb&gt;     true
irb&gt;   end
irb&gt; end

irb&gt; false == Bad.new
=&gt; false
irb&gt; Bad.new == false
=&gt; true
</code></pre>

<p>What the heck just happened?  Well, <code>==</code> is just another method call - the first is for the <code>FalseClass</code> instance while the second is for the <code>Bad</code> instance.</p>

<p>If you have been using Ruby for a while and wants to become better at it, I suggest you
get a copy of <code>Effective Ruby</code> by Peter Jones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails #permitted]]></title>
    <link href="http://gregmoreno.ca/blog/2015/08/21/rails-permitted/"/>
    <updated>2015-08-21T00:00:00-07:00</updated>
    <id>http://gregmoreno.ca/blog/2015/08/21/rails-permitted</id>
    <content type="html"><![CDATA[<p>I recently upgraded a personal app I use for learning new things in Rails. But when I upgraded from
4.1.4 to 4.1.12 I encountered this familiar error.</p>

<pre><code>Customer.where(auth.slice(:provider, :uid)).first_or_initialize
ActiveModel::ForbiddenAttributesError: ActiveModel::ForbiddenAttributesError
from /Users/greg/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/activemodel-4.1.12/lib/active_model/forbidden_attributes_protection.rb:21:in `sanitize_for_mass_assignment`
</code></pre>

<p>Now I remember. It&rsquo;s one of those mass assignments where you have to specify the &lsquo;permitted&rsquo; values before you can continue. In Rails 4, it&rsquo;s good practice
to whitelist the attributes you receive in the controller and it goes something like this:</p>

<pre><code>def user_params
  params.require(:user).permit(:username, :email, :password)
end

# somewhere in the controller
Customer.create(user_params)
</code></pre>

<p>Now, let&rsquo;s use this idiom. It should be easy, right?</p>

<pre><code>&gt; auth.permit(:provider, :uid)
=&gt; nil
</code></pre>

<p>Wait, that didn&rsquo;t go as expected. How about just simply composing the hash?</p>

<pre><code>&gt; Customer.where(provider: auth[:provider], uid: auth[:uid]).first_or_initialize
=&gt; #&lt;Customer:0x007fd9168ffa88&gt;
</code></pre>

<p>Interesting. #permit returns nil, using plain hash works, and #slice doesn&rsquo;t.</p>

<pre><code>&gt; auth.slice(:provider, :uid).class
=&gt; OmniAuth::AuthHash &lt; Hashie::Mash
</code></pre>

<p>It shouldn&rsquo;t matter what auth is as long as it behaves like what the Customer model expects. But what
does the Customer model expects? Actually, the error message is telling us what it expects. In Rails,
there is this module for mass assignment protection:</p>

<pre><code># https://github.com/rails/rails/blob/master/activemodel/lib/active_model/forbidden_attributes_protection.rb
module ActiveModel
  # Raised when forbidden attributes are used for mass assignment.
  #
  #   class Person &lt; ActiveRecord::Base
  #   end
  #
  #   params = ActionController::Parameters.new(name: 'Bob')
  #   Person.new(params)
  #   # =&gt; ActiveModel::ForbiddenAttributesError
  #
  #   params.permit!
  #   Person.new(params)
  #   # =&gt; #&lt;Person id: nil, name: "Bob"&gt;
  class ForbiddenAttributesError &lt; StandardError
  end

  module ForbiddenAttributesProtection # :nodoc:
    protected
      def sanitize_for_mass_assignment(attributes)
        if attributes.respond_to?(:permitted?) &amp;&amp; !attributes.permitted?
          raise ActiveModel::ForbiddenAttributesError
        else
          attributes
        end
      end
      alias :sanitize_forbidden_attributes :sanitize_for_mass_assignment
  end
end
</code></pre>

<p>Nothing fancy here. Rails does a simple check whether to allow mass assignment or not.</p>

<pre><code>&gt; auth.slice(:provider, :uid).permitted?
=&gt; false

&gt; { provider: auth[:provider], uid: auth[:uid] }.permitted?
NoMethodError: undefined method `permitted?' for {:provider=&gt;"facebook", :uid=&gt;"123"}:Hash
</code></pre>

<p>OmniAuth::AuthHash does not even allow it. Plain Hash works because it doesn&rsquo;t even respond to #permitted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 4]]></title>
    <link href="http://gregmoreno.ca/blog/2014/11/24/rebuild-rails-part4/"/>
    <updated>2014-11-24T00:00:00-08:00</updated>
    <id>http://gregmoreno.ca/blog/2014/11/24/rebuild-rails-part4</id>
    <content type="html"><![CDATA[<p>Now, it is time to build real pages in our super duper Tracks framework. We will support ERB and to do that
we need the <a href="https://rubygems.org/gems/erubis">erubis</a> gem.</p>

<pre><code># app/controllers/posts_controller.rb
class PostsController &lt; Tracks::Controller
  def index
    locals = { title: "/posts/index" }
    render template: "posts/index", locals: locals
  end
end

# app/views/posts/index.html.erb
hello from tracks &lt;%= title %&gt;

# lib/tracks/controller.rb
def render(options)
  template_name = options.fetch(:template)
  locals = options.fetch(:locals)

  filename = File.join "app/views", "#{template_name}.html.erb"
  template = File.read(filename)
  erb = Erubis::Eruby.new(template)
  erb.result locals
end

$ ruby spec/application_spec.rb
Run options: --seed 12593

# Running:

..

Finished in 0.020498s, 97.5705 runs/s, 195.1410 assertions/s.

2 runs, 4 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p>Our tests show we are good but it&rsquo;s not even close to Rails' &ldquo;magic&rdquo;. First, let&rsquo;s
use the <code>controller/action</code> convention, i.e. if no template is passed to the <code>render</code> method,
we should use the <code>app/views/posts/index.html.erb</code> template. We also modify our <code>Controller</code> to save
the <code>env</code> data passed by <code>Rack</code> because we need to check the path.</p>

<pre><code># lib/tracks/controller.rb
module Tracks
  class Controller
    attr_reader :env, :controller_name, :action_name

    def initialize(env)
      @env = env
      extract_env_info
    end

    def extract_env_info
      _, @controller_name, @action_name, after = path_info.split("/")
    end

    def path_info
      env["PATH_INFO"]
    end

    def extract_template_name
      "#{controller_name}/#{action_name}"
    end
  end
end
</code></pre>

<p>We then update our <code>render</code> method to check for the template if it is not passed.</p>

<pre><code># lib/tracks/controller.rb
     def render(options)
-      template_name = options.fetch(:template)
+      template_name = options.fetch(:template) { extract_template_name }
       locals = options.fetch(:locals)

       filename = File.join "app/views", "#{template_name}.html.erb"
@@ -29,6 +43,5 @@ module Tracks
       erb.result locals
     end
</code></pre>

<p>Our next modification involves using the @instance_variables to pass values from the
controller to the view files. To do that, we just need to pass the current <code>binding</code> to
the <code>eruby</code> instance and it should pickup the instance variables we have in the controller.</p>

<p>In Rails, it is a bit more involved. There is a concept of <a href="https://github.com/rails/rails/blob/0c5552a3dd28e35cce64462765cc41c5355db0f1/actionpack/lib/abstract_controller/rendering.rb#L84-L86">view context</a>. Rails
collects the instance variables from the controller, then duplicates the values into the view context.
The Ruby methods <code>#instance_variables</code>, <code>#instance_variable_get</code>, <code>#instance_variable_set</code> allow
Rails to accomplish that.</p>

<pre><code>def render(options={})
  template_name = options.fetch(:template) { extract_template_name }
  filename = File.join "app/views", "#{template_name}.html.erb"
  template = File.read(filename)
  erb = Erubis::Eruby.new(template)
  erb.result(binding)
end
</code></pre>

<p>We also update our <code>render</code> method and controller because we do not need the <code>locals</code> parameter.</p>

<pre><code># app/controllers/posts_controller.rb
class PostsController &lt; Tracks::Controller
  def index
    @title = "/posts/index"
    render
  end
end

# app/views/posts/index.html.erb
hello from tracks &lt;%= @title %&gt;
</code></pre>

<p>We still have the extra <code>render</code> call in our controller. To remove it, we keep track of the call
to render and if there&rsquo;s no rendered result yet, we call <code>render</code>.</p>

<pre><code>diff --git i/app/controllers/posts_controller.rb w/app/controllers/posts_controller.rb
index f7883e3..d7aa012 100644
--- i/app/controllers/posts_controller.rb
+++ w/app/controllers/posts_controller.rb
@@ -1,6 +1,5 @@
 class PostsController &lt; Tracks::Controller
   def index
     @title = "/posts/index"
-    render
   end
 end
diff --git i/lib/tracks/controller.rb w/lib/tracks/controller.rb
index 0119c1b..3d5d75a 100644
--- i/lib/tracks/controller.rb
+++ w/lib/tracks/controller.rb
@@ -30,7 +30,12 @@ module Tracks

       controller_class_name = controller.capitalize + "Controller"
       controller_class = Object.const_get(controller_class_name)
-      controller_class.new(env).send(action)
+      controller_context = controller_class.new(env)
+      controller_context.send(action)
+
+      if controller_context.rendered_string.nil?
+        controller_context.render
+      end
+
+      controller_context.rendered_string
     end

     def render(options={})
@@ -38,7 +43,7 @@ module Tracks
       filename = File.join "app/views", "#{template_name}.html.erb"
       template = File.read(filename)
       erb = Erubis::Eruby.new(template)
-      erb.result(binding)
+      @rendered_string = erb.result(binding)
     end
</code></pre>

<p>We also update our controller and tests to cover the case of using <code>render</code> explicitly.</p>

<pre><code># app/controllers/posts_controller.rb
class PostsController &lt; Tracks::Controller
  def index
    @title = "/posts/index"
  end

  def show
    @title = "/posts/index"
    render template: "posts/index"
  end
end

# spec/application_spec.rb
require_relative "spec_helper"

describe CrazyApp::Application do
  include Rack::Test::Methods

  def app
    CrazyApp::Application
  end

  it "should respond with /" do
    get "/"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from index.html"
  end

  it "should respond with different path" do
    get "/posts/index"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from tracks /posts/index"
  end

  it "should respond with different template" do
    get "/posts/show"
    last_response.ok?.must_equal true
    last_response.body.strip.must_equal "hello from tracks /posts/index"
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 3]]></title>
    <link href="http://gregmoreno.ca/blog/2014/11/20/rebuild-rails-part3/"/>
    <updated>2014-11-20T00:00:00-08:00</updated>
    <id>http://gregmoreno.ca/blog/2014/11/20/rebuild-rails-part3</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s continue our rebuild rails series by supporting controllers. We simplify things
by assuming a <code>controller/action</code> path format and only support <code>GET</code> request.</p>

<p>We adjust our <code>.call</code> implementation to handle the new path format. We also introduce
another method <code>#render_controller_action</code> that inspects the <code>path_info</code>
and instantiates the right controller using Rails <code>NameController</code> convention.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># lib/tracks.rb</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="n">path_info</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">]</span>
  <span class="k">if</span>  <span class="n">path_info</span> <span class="o">==</span> <span class="s2">&quot;/&quot;</span>
    <span class="n">text</span> <span class="o">=</span> <span class="no">Tracks</span><span class="o">::</span><span class="no">Controller</span><span class="o">.</span><span class="n">render_default_root</span>
  <span class="k">else</span>
    <span class="n">text</span> <span class="o">=</span> <span class="no">Tracks</span><span class="o">::</span><span class="no">Controller</span><span class="o">.</span><span class="n">render_controller_action</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span><span class="p">},</span> <span class="o">[</span><span class="n">text</span><span class="o">]</span> <span class="o">]</span>
<span class="k">end</span>

<span class="c1"># lib/tracks/controller.rb</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">render_controller_action</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="n">path_info</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">]</span>
  <span class="n">_</span><span class="p">,</span> <span class="n">controller</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">after</span> <span class="o">=</span> <span class="n">path_info</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span>

  <span class="n">controller_class_name</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="n">capitalize</span> <span class="o">+</span> <span class="s2">&quot;Controller&quot;</span>
  <span class="n">controller_class</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">controller_class_name</span><span class="p">)</span>
  <span class="n">controller_class</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ruby spec/application_spec.rb
Run options: --seed 55835
<span class="c"># Running:</span>

.E

Finished in 0.015837s, 126.2865 runs/s, 126.2865 assertions/s.

  1<span class="o">)</span> Error:
CrazyApp::Application#test_0002_should respond with different path:
NameError: uninitialized constant PostsController
    /code/crazy/lib/tracks/controller.rb:13:in <span class="sb">`</span>const_get<span class="err">&#39;</span></code></pre></div>


<p>When we run the test, you see it failed on <code>PostsController</code> which is what
we expect since we haven&rsquo;t implemented <code>PostsController</code> yet. Let&rsquo;s add the
controller now.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># app/controllers/posts_controller.rb</span>
<span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">Tracks</span><span class="o">::</span><span class="no">Controller</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="s2">&quot;hello from tracks /posts/index&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># config/application.rb</span>
<span class="nb">require</span> <span class="s2">&quot;./app/controllers/posts_controller&quot;</span></code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ruby spec/application_spec.rb
Run options: --seed 2475

<span class="c"># Running:</span>
..

Finished in 0.019152s, 104.4277 runs/s, 208.8555 assertions/s.

<span class="m">2</span> runs, <span class="m">4</span> assertions, <span class="m">0</span> failures, <span class="m">0</span> errors, <span class="m">0</span> skips</code></pre></div>


<h1>Automatic loading</h1>

<p>Our tests pass but something&rsquo;s not right. In Rails, there is no need to require
every controller (or pretty much anything) to make it work. To support this feature in
our framework, we need 2 things:</p>

<ul>
<li>convert PostsController to posts_controller.rb; and</li>
<li>auto-require &lsquo;posts_controller&rsquo;</li>
</ul>


<p>To tie these 2 together, we tap into <code>Object.const_missing</code> so our framework would
know if a class has been used but not yet loaded.</p>

<p>We also update the <code>$LOAD_PATH</code> to include <code>app/controllers</code> folder so Ruby knows
where to look.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># lib/tracks.rb</span>
<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../tracks/helper&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../tracks/object&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>

<span class="c1"># config/application.rb</span>
<span class="nb">require</span> <span class="s1">&#39;./lib/tracks&#39;</span>
<span class="vg">$LOAD_PATH</span> <span class="o">&lt;&lt;</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../app/controllers&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>

<span class="k">module</span> <span class="nn">CrazyApp</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Tracks</span><span class="o">::</span><span class="no">Application</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># lib/tracks/helper.rb</span>
<span class="k">module</span> <span class="nn">Tracks</span>
  <span class="k">module</span> <span class="nn">Helper</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">to_underscore</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
      <span class="n">string</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/[A-Z][a-z]+/</span><span class="p">)</span><span class="o">.</span>
      <span class="n">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">.</span>
      <span class="n">downcase</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># lib/tracks/object.rb</span>
<span class="k">class</span> <span class="nc">Object</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">const_missing</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="nb">require</span> <span class="no">Tracks</span><span class="o">::</span><span class="no">Helper</span><span class="o">.</span><span class="n">to_underscore</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
    <span class="nb">const_get</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p>Our implementation of <code>.to_underscore</code> is limited compared to what&rsquo;s supported in Rails.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">01</span><span class="mi">9</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;PostsController&quot;</span>
<span class="o">=&gt;</span> <span class="s2">&quot;PostsController&quot;</span>
<span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">020</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/[A-Z][a-z]+/</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
<span class="o">=&gt;</span> <span class="s2">&quot;posts_controller&quot;</span></code></pre></div>


<p>Also, since we call <code>const_get</code> inside <code>const_missing</code>, you will run into serious
trouble if your file does not contain the expected class. Try changing the name of the
class inside <code>app/controllers/posts_controller.rb</code> into something else and you will get this
error.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="err">$</span> <span class="n">ruby</span> <span class="n">spec</span><span class="o">/</span><span class="n">application_spec</span><span class="o">.</span><span class="n">rb</span>
<span class="no">Run</span> <span class="ss">options</span><span class="p">:</span> <span class="o">--</span><span class="n">seed</span> <span class="mi">60433</span>

<span class="c1"># Running:</span>

<span class="o">.</span><span class="n">E</span>
<span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mo">043152</span><span class="n">s</span><span class="p">,</span> <span class="mi">46</span><span class="o">.</span><span class="mi">3478</span> <span class="n">runs</span><span class="o">/</span><span class="n">s</span><span class="p">,</span> <span class="mi">46</span><span class="o">.</span><span class="mi">3478</span> <span class="n">assertions</span><span class="o">/</span><span class="n">s</span><span class="o">.</span>

  <span class="mi">1</span><span class="p">)</span> <span class="ss">Error</span><span class="p">:</span>
<span class="no">CrazyApp</span><span class="o">::</span><span class="no">Application</span><span class="c1">#test_0002_should respond with different path:</span>
<span class="ss">SystemStackError</span><span class="p">:</span> <span class="n">stack</span> <span class="n">level</span> <span class="n">too</span> <span class="n">deep</span>
    <span class="sr">/Users/</span><span class="n">greg</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p247</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">forwardable</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">174</span>

<span class="mi">2</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">2</span> <span class="n">assertions</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span><span class="p">,</span> <span class="mi">1</span> <span class="n">errors</span><span class="p">,</span> <span class="mi">0</span> <span class="n">skips</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 2]]></title>
    <link href="http://gregmoreno.ca/blog/2014/11/19/rebuild-rails-part2/"/>
    <updated>2014-11-19T00:00:00-08:00</updated>
    <id>http://gregmoreno.ca/blog/2014/11/19/rebuild-rails-part2</id>
    <content type="html"><![CDATA[<p>Before we continue with out rebuilding series, we should write some tests first :)</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># spec/spec_helper.rb</span>
<span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s2">&quot;test&quot;</span>

<span class="nb">require</span> <span class="s2">&quot;rack/test&quot;</span>
<span class="nb">require</span> <span class="s2">&quot;minitest/autorun&quot;</span>

<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/application&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>


<span class="c1"># spec/application_spec.rb</span>
<span class="n">require_relative</span> <span class="s2">&quot;spec_helper&quot;</span>

<span class="n">describe</span> <span class="no">CrazyApp</span><span class="o">::</span><span class="no">Application</span> <span class="k">do</span>
  <span class="kp">include</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Test</span><span class="o">::</span><span class="no">Methods</span>

  <span class="k">def</span> <span class="nf">app</span>
    <span class="no">CrazyApp</span><span class="o">::</span><span class="no">Application</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should respond with /&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s2">&quot;/&quot;</span>
    <span class="n">last_response</span><span class="o">.</span><span class="n">ok?</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
    <span class="n">last_response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">must_equal</span> <span class="s2">&quot;hello from index.html&quot;</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should respond with different path&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s2">&quot;/posts&quot;</span>
    <span class="n">last_response</span><span class="o">.</span><span class="n">ok?</span><span class="o">.</span><span class="n">must_equal</span> <span class="kp">true</span>
    <span class="n">last_response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">must_equal</span> <span class="s2">&quot;hello from tracks /posts&quot;</span>
  <span class="k">end</span>

<span class="k">end</span></code></pre></div>


<p>Just like your typical Rails test setup, we have a common <code>spec_helper</code> file. We use <code>minitest/autorun</code> which gives us
rspec-style DSL out of the box. For our test, we need <code>Rack::Test::Methods</code> to use <code>get</code> and other http methods. We also
need an <code>app</code> method that returns our Rack application to make the tests work.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ruby spec/application_spec.rb
Run options: --seed 57256

<span class="c"># Running:</span>
..

Finished in 0.015864s, 126.0716 runs/s, 252.1432 assertions/s.

<span class="m">2</span> runs, <span class="m">4</span> assertions, <span class="m">0</span> failures, <span class="m">0</span> errors, <span class="m">0</span> skips</code></pre></div>


<p>We&rsquo;re all good. Awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#ruby Array of hashes quiz]]></title>
    <link href="http://gregmoreno.ca/blog/2014/11/17/ruby-array-of-hashes-quiz/"/>
    <updated>2014-11-17T00:00:00-08:00</updated>
    <id>http://gregmoreno.ca/blog/2014/11/17/ruby-array-of-hashes-quiz</id>
    <content type="html"><![CDATA[<p>Found this interesting ruby quiz from <a href="http://www.alphasights.com/careers/experienced/positions/new-york/6-ruby-on-rails-developer/apply">AlphaSights</a>.
Given an array of hashes, collapse into an array of hashes containing one entry per day.
And you can only reference the <code>:time</code> key and not the rest.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">log</span> <span class="o">=</span> <span class="o">[</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201201</span><span class="p">,</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201201</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201201</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201202</span><span class="p">,</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201202</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201202</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="o">]</span>

<span class="c1"># result should be</span>
<span class="o">[</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201201</span><span class="p">,</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="mi">201202</span><span class="p">,</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">0</span><span class="p">},</span>
<span class="o">]</span></code></pre></div>


<p>The first thing came to mind is to use <a href="http://www.ruby-doc.org/core-2.1.1/Enumerable.html#method-i-group_by"><code>Enumerable#group_by</code></a></p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">grouped</span> <span class="o">=</span> <span class="n">log</span><span class="o">.</span><span class="n">group_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">[</span><span class="ss">:time</span><span class="o">]</span> <span class="p">}</span>
<span class="n">collapsed</span> <span class="o">=</span> <span class="n">grouped</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">a</span><span class="o">|</span>
  <span class="n">no_time_h</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">others</span><span class="p">,</span> <span class="n">h</span><span class="o">|</span>
    <span class="n">others</span><span class="o">.</span><span class="n">merge</span> <span class="n">h</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">k</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">==</span> <span class="ss">:time</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="n">t</span><span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">no_time_h</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">collapsed</span><span class="o">.</span><span class="n">inspect</span></code></pre></div>


<p>However, after reading this a couple of times, I still find the solution hard to follow.
For starter, <code>group_by</code> returns a hash where the values are an array of hashes which
brings me back to the original problem even though it is already grouped by time.
That I feel made the rest of the code more complicated.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># result of group_by</span>
<span class="p">{</span><span class="mi">201201</span><span class="o">=&gt;[</span><span class="p">{</span><span class="ss">:time</span><span class="o">=&gt;</span><span class="mi">201201</span><span class="p">,</span> <span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="ss">:time</span><span class="o">=&gt;</span><span class="mi">201201</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="mi">7</span><span class="p">},</span> <span class="p">{</span><span class="ss">:time</span><span class="o">=&gt;</span><span class="mi">201201</span><span class="p">,</span> <span class="ss">:z</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">}</span><span class="o">]</span><span class="p">,</span> <span class="mi">201202</span><span class="o">=&gt;[</span><span class="p">{</span><span class="ss">:time</span><span class="o">=&gt;</span><span class="mi">201202</span><span class="p">,</span> <span class="ss">:a</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="ss">:time</span><span class="o">=&gt;</span><span class="mi">201202</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;</span><span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="ss">:time</span><span class="o">=&gt;</span><span class="mi">201202</span><span class="p">,</span> <span class="ss">:c</span><span class="o">=&gt;</span><span class="mi">0</span><span class="p">}</span><span class="o">]</span><span class="p">}</span></code></pre></div>


<p>For my second version, I simply loop into the array and compose the hash using <code>:time</code> as the key.
Afterwards, use the <code>key-value</code> pair to compose the resulting array. The code may be longer but
it is more readable. Remember, <a href="https://www.safaribooksonline.com/library/view/beautiful-code/9780596510046/ch05.html">Correct, Beautiful, Fast (in That Order)</a>.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">hash_by_time</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">log</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">h</span><span class="o">|</span>
  <span class="n">time</span> <span class="o">=</span> <span class="n">h</span><span class="o">[</span><span class="ss">:time</span><span class="o">]</span>
  <span class="n">others</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">k</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">==</span> <span class="ss">:time</span> <span class="p">}</span>

  <span class="k">if</span> <span class="n">hash_by_time</span><span class="o">[</span><span class="n">time</span><span class="o">]</span>
    <span class="n">hash_by_time</span><span class="o">[</span><span class="n">time</span><span class="o">].</span><span class="n">merge!</span> <span class="n">others</span>
  <span class="k">else</span>
    <span class="n">hash_by_time</span><span class="o">[</span><span class="n">time</span><span class="o">]</span> <span class="o">=</span> <span class="n">others</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">collapsed</span> <span class="o">=</span> <span class="n">hash_by_time</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
  <span class="p">{</span><span class="ss">time</span><span class="p">:</span> <span class="n">k</span><span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To the crazy ones]]></title>
    <link href="http://gregmoreno.ca/blog/2014/11/16/to-the-crazy-ones/"/>
    <updated>2014-11-16T00:00:00-08:00</updated>
    <id>http://gregmoreno.ca/blog/2014/11/16/to-the-crazy-ones</id>
    <content type="html"><![CDATA[<p>Though I&rsquo;ve seen this video a gazillion times, I still find it fresh and inspiring.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/tjgtLSHhTPg" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Rails Part 1]]></title>
    <link href="http://gregmoreno.ca/blog/2014/11/16/rebuild-rails-part1/"/>
    <updated>2014-11-16T00:00:00-08:00</updated>
    <id>http://gregmoreno.ca/blog/2014/11/16/rebuild-rails-part1</id>
    <content type="html"><![CDATA[<p>I have no plans to build another Rails-clone. Let&rsquo;s leave that work to other smarter people with more time.
But wouldn&rsquo;t it be fun if we can learn how Rails work under the hood and find out what makes it &ldquo;magical&rdquo;?
In this post I will only cover what happens when you typed that url until you get an HTML page. We&rsquo;ll simplify further by not using any database
access. If you would like to go deeper and wider, there is a <a href="https://rebuilding-rails.com/">book devoted entirely to it that I highly recommend</a>.</p>

<p>Let&rsquo;s call our application <code>CrazyApp</code> and let&rsquo;s build our first web app.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config.ru</span>
<span class="n">app</span> <span class="o">=</span>  <span class="nb">proc</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
  <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s2">&quot;hello from crazy app&quot;</span><span class="o">]</span> <span class="o">]</span>
<span class="k">end</span>

<span class="n">run</span> <span class="n">app</span></code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>rackup config.ru -p <span class="m">3000</span>                                                                       <span class="o">[</span>2.0.0-p247<span class="o">]</span>
Thin web server <span class="o">(</span>v1.6.2 codename Doc Brown<span class="o">)</span>
Maximum connections <span class="nb">set </span>to 1024
Listening on 0.0.0.0:3000, CTRL+C to stop
127.0.0.1 - - <span class="o">[</span>16/Nov/2014 20:42:02<span class="o">]</span> <span class="s2">&quot;GET / HTTP/1.1&quot;</span> <span class="m">200</span> - 0.0008</code></pre></div>


<p><img src="http://gregmoreno.ca/assets/rebuild-1.png" alt="rebuild1" /></p>

<h1>It&rsquo;s all about the Rack</h1>

<p>Rack is a gem that sits between your framework (e.g. Rails) and Ruby-based
application servers like Thin, Puma, Unicorn, and WEBrick. When you type a url,
it goes through several layers of software until it hits our application which
in this case just returns a <code>hellow from crazy app</code>. Rack simplifies the interface
for web servers that we only have to worry about a few things to handle an HTTP request.</p>

<ul>
<li>HTTP status, e.g. 200</li>
<li>Response headers. There are lot of things you can set here but for now let&rsquo;s stick to content-type.</li>
<li>Actual content. In our case, an HTML page.</li>
</ul>


<h1></h1>

<p>Let&rsquo;s look at a boilerplate <code>config.ru</code> that you get from Rails.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># This file is used by Rack-based servers to start the application.</span>

<span class="nb">require</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/environment&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
<span class="n">run</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span></code></pre></div>


<p>One step in <a href="http://api.rubyonrails.org/classes/Rails/Application.html">Rails' bootup process</a> is to
define <code>Rails.application</code> as <code>class MyApp::Application &lt; Rails::Application</code>.
Both <code>Rails::Application</code> and <code>proc</code> provides a <code>call</code> method that is why both <code>config.ru</code> works.</p>

<p>Now, let&rsquo;s move our initial <code>config.ru</code> code to a different class that we can later extract into
a gem for our framework that we shall call <code>Tracks</code>. From here on, we shall follow Rails conventions
and build our gem from there.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config.ru</span>
<span class="nb">require</span> <span class="s1">&#39;./config/application&#39;</span>
<span class="n">run</span> <span class="no">CrazyApp</span><span class="o">::</span><span class="no">Application</span>

<span class="c1"># config/application.rb</span>
<span class="nb">require</span> <span class="s1">&#39;./lib/tracks&#39;</span>

<span class="k">module</span> <span class="nn">CrazyApp</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Tracks</span><span class="o">::</span><span class="no">Application</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># lib/tracks.rb</span>
<span class="k">module</span> <span class="nn">Tracks</span>
  <span class="k">class</span> <span class="nc">Application</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
      <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s2">&quot;hello from tracks&quot;</span><span class="o">]</span> <span class="o">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p><img src="http://gregmoreno.ca/assets/rebuild-2.png" alt="rebuild2" /></p>

<p>Exit from your rackup process and re-run it because we are not supporting auto-reloading. This time you will see a message from our <code>Tracks</code> - the super awesome Rails-like framework.</p>

<h1>Render a default page</h1>

<p>We now introduce a very simple root controller and use it to render a default index page. We also modify our route handling
by inspecting the value in <code>env</code> object that Rack passed to our framework. The <code>env</code> packs a lot of information about
a request and for our routing, we are interested in <code>PATH_INFO</code> which is the url after the domain minus the query parameters.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># lib/tracks/controlle.rb</span>
<span class="k">module</span> <span class="nn">Tracks</span>
  <span class="k">class</span> <span class="nc">Controller</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">render_default_root</span>
      <span class="n">filename</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;public&#39;</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">)</span>
      <span class="no">File</span><span class="o">.</span><span class="n">read</span> <span class="n">filename</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>


<span class="c1"># lib/tracks.rb</span>
<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../tracks/controller&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>

<span class="k">module</span> <span class="nn">Tracks</span>
  <span class="k">class</span> <span class="nc">Application</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
      <span class="n">path_info</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span>
      <span class="k">if</span>  <span class="n">path_info</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span>
        <span class="n">text</span> <span class="o">=</span> <span class="no">Tracks</span><span class="o">::</span><span class="no">Controller</span><span class="o">.</span><span class="n">render_default_root</span>
      <span class="k">else</span>
        <span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;hello from tracks </span><span class="si">#{</span><span class="n">path_info</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="k">end</span>

      <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="n">text</span><span class="o">]</span> <span class="o">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p><img src="http://gregmoreno.ca/assets/rebuild-3.png" alt="rebuild3" />
<img src="http://gregmoreno.ca/assets/rebuild-4.png" alt="rebuild4" /></p>

<p>That&rsquo;s it for now. Next time, we will create our own controllers, action, and dynamic pages using ERB.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#ruby Counting Vowels]]></title>
    <link href="http://gregmoreno.ca/blog/2014/11/13/ruby-minimal-code/"/>
    <updated>2014-11-13T00:00:00-08:00</updated>
    <id>http://gregmoreno.ca/blog/2014/11/13/ruby-minimal-code</id>
    <content type="html"><![CDATA[<p>Just saw a simple exercise in my Facebook feed and I thought I give it a shot. The problem is simple:</p>

<blockquote><p>Write a function that returns the number of vowels in the string.</p></blockquote>

<p>Here&rsquo;s my ruby solution:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;minitest/autorun&#39;</span>

<span class="k">def</span> <span class="nf">vowel_count</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
  <span class="n">vowels</span> <span class="o">=</span> <span class="sx">%w[a e i o u]</span>
  <span class="n">s</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w/</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="k">if</span> <span class="n">vowels</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span>
<span class="k">end</span>

<span class="n">describe</span> <span class="s2">&quot;#vowel_count&quot;</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">&quot;should count upcase lowercase&quot;</span> <span class="k">do</span>
    <span class="nb">test</span> <span class="o">=</span> <span class="s2">&quot;I wanted to be an astronaut&quot;</span>
    <span class="n">vowel_count</span><span class="p">(</span><span class="nb">test</span><span class="p">)</span><span class="o">.</span><span class="n">must_equal</span> <span class="mi">10</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should be zero for empty string&quot;</span> <span class="k">do</span>
    <span class="n">vowel_count</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">must_equal</span> <span class="mi">0</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should be zero for nil&quot;</span> <span class="k">do</span>
    <span class="n">vowel_count</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span><span class="o">.</span><span class="n">must_equal</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p>Sounds simple, right? But there are subtle things you should watch out for.</p>

<ul>
<li><em>Upper and lower cases</em> may seem trivial but programmers are often bitten by these when comparing strings.</li>
<li>An initial solution would be to access each character via [index] and increment a counter for vowels.
Here is where familiarity with your language&rsquo;s libraries becomes useful.
While I didn&rsquo;t get the right method initially, I know Ruby&rsquo;s String library offers a way
to extract regex matches. From then on, it&rsquo;s just a matter of using <code>Enumerable#select</code>
which is a common Ruby idiom for filtering elements.</li>
<li>Having tests even for a simple code is a good discipline to have. My initial test only
covers the functional requirement. When I added the case of nil it quickly showed
the flaw in my code, which brings me to my next point.</li>
<li>Produce sensible results as much as possible. While you can argue the requirement
states a string and not a nil, it is good habit to defend your code in case the caller
passed an invalid value. Hence, I converted the parameter to a string to ensure the
rest of the code is working with a string object and it gives a sensible result even
if the passed parameter is not a string.</li>
</ul>


<h1>Minimalist testing</h1>

<p>If you are working with Rails' for a while, you probably been pampered with Rails seamless
integration with testing frameworks you&rsquo;ll be forgiven if you think these support
are only available within Rails.</p>

<p>Ruby comes with <code>minitest/autorun</code> that supports a minimalist testing framework. Just require in your code and you are
good to go with rspec-style testing right off the bat.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ruby vowelcount.rb
Run options: --seed 47907

<span class="c"># Running:</span>

...

Finished in 0.001155s, 2597.4026 runs/s, 2597.4026 assertions/s.

<span class="m">3</span> runs, <span class="m">3</span> assertions, <span class="m">0</span> failures, <span class="m">0</span> errors, <span class="m">0</span> skips</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#hacking  Ansible]]></title>
    <link href="http://gregmoreno.ca/blog/2014/10/17/hacking-ansible/"/>
    <updated>2014-10-17T21:02:43-07:00</updated>
    <id>http://gregmoreno.ca/blog/2014/10/17/hacking-ansible</id>
    <content type="html"><![CDATA[<p>Before you continue, let me congratulate myself. It’s been years since I’ve written a post. Hooray! Also, thank you to <a href="https://github.com/radamanthus/ansible-rails">Rad</a> for guiding me on my Ansible adventure. The ansible code I reference here are <a href="https://github.com/gregmoreno/ansible-rails">available in github</a>.</p>

<p>There are tons of posts about Ansible already so this is more about gotchas I learned along the way.</p>

<h1>Variables</h1>

<p>Just like good coding, you should isolate things that will change. Store variables in vars/defaults.yml for things like initial database password, deployment directory, ruby version, and whatnot. I started out with using snake format but I later learned you can have a hierarchy for your variables as well, for example:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">google.app</span></code></pre></div>


<p>Inside your tasks, you can reference it with . Of course, nothing prevents you from just simply naming your variable as app_name and use it as</p>

<h1>Hosts and groups</h1>

<p>You can use ansible to work on 1 or more servers at a time. These servers are specified in the hosts file (see hosts in the example). You can also group servers by using [groupname]. In the example below, you can have ansible target qa only (using the —limit option) and it will update the 2 servers you listed under the [qa] group.</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="p-Indicator">[</span><span class="nv">local</span><span class="p-Indicator">]</span>
<span class="l-Scalar-Plain">localhost ansible_python_interpreter=/usr/local/bin/python</span>

<span class="l-Scalar-Plain">[www]</span>
<span class="l-Scalar-Plain">www.yourapp.com</span>

<span class="l-Scalar-Plain">[staging]</span>
<span class="l-Scalar-Plain">staging.yourapp.com</span>

<span class="l-Scalar-Plain">[qa]</span>
<span class="l-Scalar-Plain">qa1.yourapp.com</span>
<span class="l-Scalar-Plain">qa2.yourapp.com</span></code></pre></div>


<h1>Use roles</h1>

<p>Roles allow you to separate common tasks into sort of like modules giving you flexibility. Some use roles to group common tasks like ‘db’, ‘web’, etc. For starters like me and if you are playing with combining different software, I used roles to define specific software. I have a role named ‘mysql’, a role ‘nginx-puma’, or a role ‘nginx-passenger’. Over time, you may split the roles into functional distinctions like web, db, etc.</p>

<h1>Creating an EC2 instance</h1>

<p>In my example, just update the variables below (included in vars/defaults.yml) to suit your requirements.</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">ec2_keypair</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yourapp-www</span>
<span class="l-Scalar-Plain">ec2_instance_type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">t1.micro</span>
<span class="l-Scalar-Plain">ec2_security_group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">web-security-group</span>
<span class="l-Scalar-Plain">ec2_region</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">us-west-1</span>
<span class="l-Scalar-Plain">ec2_zone</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">us-west-1c</span>
<span class="l-Scalar-Plain">ec2_image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ami-f1fdfeb4</span> <span class="c1"># Ubuntu Server 14.04 LTS (PV) 64-bit</span>
<span class="l-Scalar-Plain">ec2_instance_count</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span></code></pre></div>


<p>You need your AWS_ACCESS_KEY, AWS_SECRET_KEY, and PEM file to create an instance. Creating the AWS access keys requires access to the IAM (Identity and Access Management).</p>

<p>When you’re ready, run the command:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">AWS_ACCESS_KEY</span><span class="o">=</span><span class="s2">&quot;access&quot;</span> <span class="nv">AWS_SECRET_KEY</span><span class="o">=</span><span class="s2">&quot;secret&quot;</span> ansible-playbook -i hosts ec2.yml</code></pre></div>


<p>I have set ec2.yml to run against ‘local’ group (specified in the ’hosts’ file) because you don’t have a host yet. The Ansible EC2 module is smart enough to know that you are still creating an instance at this point.</p>

<p>After running the playbook, notice that it creates a new entry in the [launched] group in your hosts file. The new entry points to the EC2 instance you just created. At this point, you now have a server to run the rest of the playbooks.</p>

<h1>Creating the deploy user</h1>

<p>When the instance is created, it would create a new user. In my project where I use Ubuntu, it creates an ‘ubuntu’ user. In other cases, it might only create ‘root’ user. Regardless, your next step is to create a ‘deploy’ user because it is not a good idea to keep using root. You can change the name of the deploy user (see vars/defaults.yml) but I prefer using ‘deploy’ because it is also the default user in capistrano and I’m a Rails guy.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">ansible-playbook -i hosts create-user.yml --user root --limit launched --private-key ~/.ssh/yourapp.pem</code></pre></div>


<p>This playbook does several things:</p>

<ul>
<li>Creates the ‘deploy’ user.</li>
<li>Adds your ssh key to /home/deploy/.ssh/authorized_keys</li>
<li>Gives deploy sudo rights.</li>
<li>Disables ssh and password access for root.</li>
</ul>


<p>Note that I specified in the initial user ‘root’. Depending on the instance you just created it might be ‘ubuntu’ or some other initial user</p>

<h1>Creating an instance in other providers</h1>

<p>In Digital Ocean (and other similar providers), you can create an instance using their admin interface. The initial user is ‘root’ and you can specify a password and/or public key. If you forgot the public key, you must add it before you continue.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">scp ~/.ssh/id_rsa.pub root@yourapp.com:~/uploaded_key.pub
ssh root@staging.app.com
mkdir -m og-rwx .ssh
cat ~/uploaded_key.pub &gt;&gt; ~/.ssh/authorized_keys</code></pre></div>


<h1>Bootstrapping</h1>

<p>Now that you have your deploy user, just run the command below, take a coffee, and come back after 30 mins. That’s how awesome ansible is.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">ansible-playbook -i hosts bootstrap.yml --limit launched</code></pre></div>


<p>You may need to tweak the roles or update a specific server. For example, you’re testing an upgrade on a staging server. In that case, make sure you specify the corect host group in the —limit parameter</p>

<p>A few more things I learned with this exercise:</p>

<ul>
<li>I can set the file mode with mkdir.</li>
<li>Use <code>bash —login</code> to load login profile. When I ssh using ‘deploy@domain‘, my ruby gets loaded correctly. However, when using ansible (which uses ssh), my ruby is not loaded and thus, you will get errors like &lsquo;bundle not found&rsquo;.</li>
<li>I’m torn between using system ruby and chruby. On one hand, I feel like there is no need for chruby because this is a server and no need to switch rubies from time-to-time. On the other hand, why not try it and see how it works.</li>
</ul>

]]></content>
  </entry>
  
</feed>
